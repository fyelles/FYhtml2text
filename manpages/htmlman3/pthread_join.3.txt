

Linux
          manual pages
Section 3
 

 
 

Name
pthread_join — join with a terminated thread

Synopsis

#include <pthread.h>

int
            pthread_join(
pthread_t thread,

 
void **retval);

           
        

Note

Compile and link with −pthread.

 
DESCRIPTION
The pthread_join() function
      waits for the thread specified by thread to terminate. If that
      thread has already terminated, then pthread_join() returns immediately. The
      thread specified by thread must be joinable.
If retval is not
      NULL, then pthread_join()
      copies the exit status of the target thread (i.e., the value
      that the target thread supplied to pthread_exit(3)) into the
      location pointed to by *retval. If the target thread
      was canceled, then PTHREAD_CANCELED is placed in *retval.
If multiple threads simultaneously try to join with the
      same thread, the results are undefined. If the thread calling
      pthread_join() is canceled,
      then the target thread will remain joinable (i.e., it will
      not be detached).

 
RETURN VALUE
On success, pthread_join()
      returns 0; on error, it returns an error number.

 
ERRORS

EDEADLK

A deadlock was detected (e.g., two threads tried to
            join with each other); or thread specifies the
            calling thread.

EINVAL

thread is
            not a joinable thread.

EINVAL

Another thread is already waiting to join with this
            thread.

ESRCH

No thread with the ID thread could be
            found.

 
CONFORMING TO
POSIX.1-2001.

 
NOTES
After a successful call to pthread_join(), the caller is guaranteed
      that the target thread has terminated.
Joining with a thread that has previously been joined
      results in undefined behavior.
Failure to join with a thread that is joinable (i.e., one
      that is not detached), produces a "zombie thread". Avoid
      doing this, since each zombie thread consumes some system
      resources, and when enough zombie threads have accumulated,
      it will no longer be possible to create new threads (or
      processes).
There is no pthreads analog of waitpid(-1, &status, 0), that
      is, "join with any terminated thread". If you believe you
      need this functionality, you probably need to rethink your
      application design.
All of the threads in a process are peers: any thread can
      join with any other thread in the process.

 
EXAMPLE
See pthread_create(3).

 
SEE ALSO
pthread_cancel(3),
      pthread_create(3),
      pthread_detach(3),
      pthread_exit(3), pthread_tryjoin_np(3),
      pthreads(7)

 
COLOPHON
This page is part of release 3.33 of the Linux man-pages project. A
      description of the project, and information about reporting
      bugs, can be found at http://man7.org/linux/man-pages/.

                    Copyright (c) 2008 Linux Foundation, written by Michael Kerrisk

                      <mtk.manpagesdocument.write('@');(@)gmail.com>

                  Permission is granted to make and distribute verbatim copies of this

                  manual provided the copyright notice and this permission notice are

                  preserved on all copies.

                  Permission is granted to copy and distribute modified versions of this

                  manual under the conditions for verbatim copying, provided that the

                  entire resulting derived work is distributed under the terms of a

                  permission notice identical to this one.

                  Since the Linux kernel and libraries are constantly changing, this

                  manual page may be incorrect or out-of-date.  The author(s) assume no

                  responsibility for errors or omissions, or for damages resulting from

                  the use of the information contained herein.  The author(s) may not

                  have taken the same level of care in the production of this manual,

                  which is licensed free of charge, as they might when working

                  professionally.

                  Formatted or processed versions of this manual, if unaccompanied by

                  the source, must acknowledge the copyright and authors of this work.

