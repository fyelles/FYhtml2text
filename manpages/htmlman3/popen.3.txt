

Linux
          manual pages
Section 3
 

 
 

Name
popen, pclose — pipe stream to or from a process

Synopsis

#include <stdio.h>

FILE
            *popen(
const char *command,

 
const char *type);

           
        

int
            pclose(
FILE *stream);

           
        

Note

Feature Test Macro Requirements
                      for glibc (see feature_test_macros(7)):

popen(), pclose():

_POSIX_C_SOURCE
                      >= 2 || _XOPEN_SOURCE ||
                      _BSD_SOURCE ||
                      _SVID_SOURCE

 
DESCRIPTION
The popen() function opens a
      process by creating a pipe, forking, and invoking the shell.
      Since a pipe is by definition unidirectional, the type argument may specify only
      reading or writing, not both; the resulting stream is
      correspondingly read-only or write-only.
The command
      argument is a pointer to a null-terminated string containing
      a shell command line. This command is passed to /bin/sh using the −c flag; interpretation, if any, is
      performed by the shell. The type argument is a pointer to a
      null-terminated string which must contain either the letter
      'r' for reading or the letter 'w' for writing. Since glibc
      2.9, this argument can additionally include the letter 'e',
      which causes the close-on-exec flag (FD_CLOEXEC) to be set on the underlying
      file descriptor; see the description of the O_CLOEXEC flag in open(2) for reasons why
      this may be useful.
The return value from popen() is a normal standard I/O stream in
      all respects save that it must be closed with pclose() rather than fclose(3). Writing to such
      a stream writes to the standard input of the command; the
      command's standard output is the same as that of the process
      that called popen(), unless
      this is altered by the command itself. Conversely, reading
      from a "popened" stream reads the command's standard output,
      and the command's standard input is the same as that of the
      process that called popen().
Note that output popen()
      streams are fully buffered by default.
The pclose() function waits
      for the associated process to terminate and returns the exit
      status of the command as returned by wait4(2).

 
RETURN VALUE
The popen() function returns
      NULL if the fork(2) or pipe(2) calls fail, or if
      it cannot allocate memory.
The pclose() function
      returns −1 if wait4(2) returns an error,
      or some other error is detected.

 
ERRORS
The popen() function does
      not set errno if memory
      allocation fails. If the underlying fork(2) or pipe(2) fails, errno is set appropriately. If the
      type argument is
      invalid, and this condition is detected, errno is set to EINVAL.
If pclose() cannot obtain
      the child status, errno is set
      to ECHILD.

 
CONFORMING TO
POSIX.1-2001.
The 'e' value for type is a Linux extension.

 
BUGS
Since the standard input of a command opened for reading
      shares its seek offset with the process that called
      popen(), if the original
      process has done a buffered read, the command's input
      position may not be as expected. Similarly, the output from a
      command opened for writing may become intermingled with that
      of the original process. The latter can be avoided by calling
      fflush(3) before
      popen().
Failure to execute the shell is indistinguishable from the
      shell's failure to execute command, or an immediate exit of
      the command. The only hint is an exit status of 127.

 
SEE ALSO
sh(1), fork(2), pipe(2), wait4(2), fclose(3), fflush(3), fopen(3), stdio(3), system(3)

 
COLOPHON
This page is part of release 3.33 of the Linux man-pages project. A
      description of the project, and information about reporting
      bugs, can be found at http://man7.org/linux/man-pages/.

                    Copyright 1991 The Regents of the University of California.

                  All rights reserved.

                  Redistribution and use in source and binary forms, with or without

                  modification, are permitted provided that the following conditions

                  are met:
                  1. Redistributions of source code must retain the above copyright

                     notice, this list of conditions and the following disclaimer.

                  2. Redistributions in binary form must reproduce the above copyright

                     notice, this list of conditions and the following disclaimer in the

                     documentation and/or other materials provided with the distribution.

                  3. All advertising materials mentioning features or use of this software

                     must display the following acknowledgement:

                  This product includes software developed by the University of

                  California, Berkeley and its contributors.

                  4. Neither the name of the University nor the names of its contributors

                     may be used to endorse or promote products derived from this software

                     without specific prior written permission.

                  THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND

                  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE

                  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE

                  ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE

                  FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL

                  DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS

                  OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)

                  HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT

                  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY

                  OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF

                  SUCH DAMAGE.

                      document.write('@');(@)(#)popen.3
                  6.4 (Berkeley) 4/30/91

                  Converted for Linux, Mon Nov 29 14:45:38 1993, faithdocument.write('@');(@)cs.unc.edu

                  Modified Sat May 18 20:37:44 1996 by Martin Schulze (joeydocument.write('@');(@)linux.de)

                  Modified 7 May 1998 by Joseph S. Myers (jsm28document.write('@');(@)cam.ac.uk)

