

Linux
          manual pages
Section 3
 

 
 

Name
__fbufsize, __flbf, __fpending, __fpurge, __freadable,
      __freading, __fsetlocking, __fwritable, __fwriting, _flushlbf
      — interfaces to stdio FILE structure

Synopsis

#include <stdio.h>
#include <stdio_ext.h>

size_t
            __fbufsize(
FILE *stream);

           
        

size_t
            __fpending(
FILE *stream);

           
        

int
            __flbf(
FILE *stream);

           
        

int
            __freadable(
FILE *stream);

           
        

int
            __fwritable(
FILE *stream);

           
        

int
            __freading(
FILE *stream);

           
        

int
            __fwriting(
FILE *stream);

           
        

int
            __fsetlocking(
FILE *stream,

 
int type);

           
        

void
            _flushlbf(
void);
 

           
        

void
            __fpurge(
FILE *stream);

           
        

 
DESCRIPTION
Solaris introduced routines to allow portable access to
      the internals of the FILE
      structure, and glibc also implemented these.
The __fbufsize() function
      returns the size of the buffer currently used by the given
      stream.
The __fpending() function
      returns the number of bytes in the output buffer. For
      wide-oriented streams the unit is wide characters. This
      function is undefined on buffers in reading mode, or opened
      read-only.
The __flbf() function
      returns a nonzero value if the stream is line-buffered, and
      zero otherwise.
The __freadable() function
      returns a nonzero value if the stream allows reading, and
      zero otherwise.
The __fwritable() function
      returns a nonzero value if the stream allows writing, and
      zero otherwise.
The __freading() function
      returns a nonzero value if the stream is read-only, or if the
      last operation on the stream was a read operation, and zero
      otherwise.
The __fwriting() function
      returns a nonzero value if the stream is write-only (or
      append-only), or if the last operation on the stream was a
      write operation, and zero otherwise.
The __fsetlocking() function
      can be used to select the desired type of locking on the
      stream. It returns the current type. The type argument can take the
      following three values:

FSETLOCKING_INTERNAL

Perform implicit locking around every operation on
            the given stream (except for the *_unlocked ones). This
            is the default.

FSETLOCKING_BYCALLER

The caller will take care of the locking (possibly
            using flockfile(3) in case
            there is more than one thread), and the stdio routines
            will not do locking until the state is reset to
            FSETLOCKING_INTERNAL.

FSETLOCKING_QUERY

Don't change the type of locking. (Only return
            it.)

The _flushlbf() function
      flushes all line-buffered streams. (Presumably so that output
      to a terminal is forced out, say before reading keyboard
      input.)
The __fpurge() function
      discards the contents of the stream's buffer.

 
SEE ALSO
flockfile(3), fpurge(3)

 
COLOPHON
This page is part of release 3.33 of the Linux man-pages project. A
      description of the project, and information about reporting
      bugs, can be found at http://man7.org/linux/man-pages/.

                    Copyright (C) 2001 Andries Brouwer <aebdocument.write('@');(@)cwi.nl>.

                  Permission is granted to make and distribute verbatim copies of this

                  manual provided the copyright notice and this permission notice are

                  preserved on all copies.

                  Permission is granted to copy and distribute modified versions of this

                  manual under the conditions for verbatim copying, provided that the

                  entire resulting derived work is distributed under the terms of a

                  permission notice identical to this one.

                  Since the Linux kernel and libraries are constantly changing, this

                  manual page may be incorrect or out-of-date.  The author(s) assume no

                  responsibility for errors or omissions, or for damages resulting from

                  the use of the information contained herein.  The author(s) may not

                  have taken the same level of care in the production of this manual,

                  which is licensed free of charge, as they might when working

                  professionally.

                  Formatted or processed versions of this manual, if unaccompanied by

                  the source, must acknowledge the copyright and authors of this work.

