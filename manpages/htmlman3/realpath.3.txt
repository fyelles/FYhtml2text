

Linux
          manual pages
Section 3
 

 
 

Name
realpath — return the canonicalized absolute
      pathname

Synopsis

#include <limits.h>
#include <stdlib.h>

char
            *realpath(
const char *path,

 
char *resolved_path);

           
        

Note

Feature Test Macro Requirements
                      for glibc (see feature_test_macros(7)):

realpath():

_BSD_SOURCE ||
                      _XOPEN_SOURCE
                      >= 500 || _XOPEN_SOURCE &&
                      _XOPEN_SOURCE_EXTENDED

 
DESCRIPTION
realpath() expands all
      symbolic links and resolves references to /./, /../ and
      extra '/' characters in the null-terminated string named by
      path to produce a
      canonicalized absolute pathname. The resulting pathname is
      stored as a null-terminated string, up to a maximum of
      PATH_MAX bytes, in the buffer
      pointed to by resolved_path. The resulting
      path will have no symbolic link, /./ or /../
      components.
If resolved_path
      is specified as NULL, then realpath() uses malloc(3) to allocate a
      buffer of up to PATH_MAX bytes
      to hold the resolved pathname, and returns a pointer to this
      buffer. The caller should deallocate this buffer using
      free(3).

 
RETURN VALUE
If there is no error, realpath() returns a pointer to the
      resolved_path.
Otherwise it returns a NULL pointer, and the contents of
      the array resolved_path are undefined,
      and errno is set to indicate the
      error.

 
ERRORS

EACCES

Read or search permission was denied for a component
            of the path prefix.

EINVAL

path is
            NULL. (In glibc versions before 2.3, this error is also
            returned if resolved_path is
            NULL.)

EIO

An I/O error occurred while reading from the file
            system.

ELOOP

Too many symbolic links were encountered in
            translating the pathname.

ENAMETOOLONG

A component of a pathname exceeded NAME_MAX characters, or an entire
            pathname exceeded PATH_MAX characters.

ENOENT

The named file does not exist.

ENOTDIR

A component of the path prefix is not a
            directory.

 
VERSIONS
On Linux this function appeared in libc 4.5.21.

 
CONFORMING TO
4.4BSD, POSIX.1-2001.
POSIX.1-2001 says that the behavior if resolved_path is NULL is
      implementation-defined. POSIX.1-2008 specifies the behavior
      described in this page.

 
NOTES
In 4.4BSD and Solaris the limit on the pathname length is
      MAXPATHLEN (found in
      <sys/param.h> SUSv2 prescribes PATH_MAX and NAME_MAX, as found in <limits.h>
      or provided by the pathconf(3) function. A
      typical source fragment would be

#ifdef PATH_MAX
  path_max = PATH_MAX;
#else
  path_max = pathconf(path, _PC_PATH_MAX);
  if (path_max <= 0)
    path_max = 4096;
#endif

(But see the BUGS section.)
The 4.4BSD, Linux and SUSv2 versions always return an
      absolute pathname. Solaris may return a relative pathname
      when the path
      argument is relative. The prototype of realpath() is given in <unistd.h>
      in libc4 and libc5, but in <stdlib.h>
      everywhere else.

 
BUGS
The POSIX.1-2001 standard version of this function is
      broken by design, since it is impossible to determine a
      suitable size for the output buffer, resolved_path. According to
      POSIX.1-2001 a buffer of size PATH_MAX suffices, but PATH_MAX need not be a defined constant,
      and may have to be obtained using pathconf(3). And asking
      pathconf(3) does not really
      help, since, on the one hand POSIX warns that the result of
      pathconf(3) may be huge and
      unsuitable for mallocing memory, and on the other hand
      pathconf(3) may return
      −1 to signify that PATH_MAX is not bounded. The resolved_path == NULL feature, not
      standardized in POSIX.1-2001, but standardized in
      POSIX.1-2008, allows this design problem to be avoided.
The libc4 and libc5 implementation contains a buffer
      overflow (fixed in libc-5.4.13). Thus, set-user-ID programs
      like mount(8) need a private
      version.

 
SEE ALSO
readlink(2), canonicalize_file_name(3),
      getcwd(3), pathconf(3), sysconf(3)

 
COLOPHON
This page is part of release 3.33 of the Linux man-pages project. A
      description of the project, and information about reporting
      bugs, can be found at http://man7.org/linux/man-pages/.

                    Copyright (C) 1999 Andries Brouwer (aebdocument.write('@');(@)cwi.nl)

                  Permission is granted to make and distribute verbatim copies of this

                  manual provided the copyright notice and this permission notice are

                  preserved on all copies.

                  Permission is granted to copy and distribute modified versions of this

                  manual under the conditions for verbatim copying, provided that the

                  entire resulting derived work is distributed under the terms of a

                  permission notice identical to this one.

                  Since the Linux kernel and libraries are constantly changing, this

                  manual page may be incorrect or out-of-date.  The author(s) assume no

                  responsibility for errors or omissions, or for damages resulting from

                  the use of the information contained herein.  The author(s) may not

                  have taken the same level of care in the production of this manual,

                  which is licensed free of charge, as they might when working

                  professionally.

                  Formatted or processed versions of this manual, if unaccompanied by

                  the source, must acknowledge the copyright and authors of this work.

                  Rewritten old page, 990824, aebdocument.write('@');(@)cwi.nl

                  2004-12-14, mtk, added discussion of resolved_path == NULL

