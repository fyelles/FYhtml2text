

Linux
          manual pages
Section 3
 

 
 

Name
pthread_attr_setstack, pthread_attr_getstack —
      set/get stack attributes in thread attributes object

Synopsis

#include <pthread.h>

int
            pthread_attr_setstack(
pthread_attr_t *attr,

 
void *stackaddr,

 
size_t stacksize);

           
        

int
            pthread_attr_getstack(
pthread_attr_t *attr,

 
void **stackaddr,

 
size_t *stacksize);

           
        

Note

Feature Test Macro Requirements
                      for glibc (see feature_test_macros(7)):

pthread_attr_getstack(),
                      pthread_attr_setstack():

_POSIX_C_SOURCE
                      >= 200112L || _XOPEN_SOURCE >=
                      600

Note

Compile and link with −pthread.

 
DESCRIPTION
The pthread_attr_setstack()
      function sets the stack address and stack size attributes of
      the thread attributes object referred to by attr to the values specified in
      stackaddr and
      stacksize,
      respectively. These attributes specify the location and size
      of the stack that should be used by a thread that is created
      using the thread attributes object attr.
stackaddr should
      point to the lowest addressable byte of a buffer of
      stacksize bytes that
      was allocated by the caller. The pages of the allocated
      buffer should be both readable and writable.
The pthread_attr_getstack()
      function returns the stack address and stack size attributes
      of the thread attributes object referred to by attr in the buffers pointed to
      by stackaddr and
      stacksize,
      respectively.

 
RETURN VALUE
On success, these functions return 0; on error, they
      return a nonzero error number.

 
ERRORS
pthread_attr_setstack() can
      fail with the following error:

EINVAL

stacksize is
            less than PTHREAD_STACK_MIN (16384) bytes. On
            some systems, this error may also occur if stackaddr or stackaddr + stacksize is not
            suitably aligned.

POSIX.1-2001 also documents an EACCES error if the stack area described
      by stackaddr and
      stacksize is not both
      readable and writable by the caller.

 
VERSIONS
These functions are provided by glibc since version
      2.2.

 
CONFORMING TO
POSIX.1-2001.

 
NOTES
These functions are provided for applications that must
      ensure that a thread's stack is placed in a particular
      location. For most applications, this is not necessary, and
      the use of these functions should be avoided. (Use pthread_attr_setstacksize(3)
      if an application simply requires a stack size other than the
      default.)
When an application employs pthread_attr_setstack(), it takes over the
      responsibility of allocating the stack. Any guard size value
      that was set using pthread_attr_setguardsize(3)
      is ignored. If deemed necessary, it is the application's
      responsibility to allocate a guard area (one or more pages
      protected against reading and writing) to handle the
      possibility of stack overflow.
The address specified in stackaddr should be suitably
      aligned: for full portability, align it on a page boundary
      (sysconf(_SC_PAGESIZE)).
      posix_memalign(3) may be
      useful for allocation. Probably, stacksize should also be a
      multiple of the system page size.
If attr is used to
      create multiple threads, then the caller must change the
      stack address attribute between calls to pthread_create(3);
      otherwise, the threads will attempt to use the same memory
      area for their stacks, and chaos will ensue.

 
EXAMPLE
See pthread_attr_init(3).

 
SEE ALSO
mmap(2), mprotect(2), posix_memalign(3),
      pthread_attr_init(3),
      pthread_attr_setguardsize(3),
      pthread_attr_setstackaddr(3),
      pthread_attr_setstacksize(3),
      pthread_create(3),
      pthreads(7)

 
COLOPHON
This page is part of release 3.33 of the Linux man-pages project. A
      description of the project, and information about reporting
      bugs, can be found at http://man7.org/linux/man-pages/.

                    Copyright (c) 2008 Linux Foundation, written by Michael Kerrisk

                      <mtk.manpagesdocument.write('@');(@)gmail.com>

                  Permission is granted to make and distribute verbatim copies of this

                  manual provided the copyright notice and this permission notice are

                  preserved on all copies.

                  Permission is granted to copy and distribute modified versions of this

                  manual under the conditions for verbatim copying, provided that the

                  entire resulting derived work is distributed under the terms of a

                  permission notice identical to this one.

                  Since the Linux kernel and libraries are constantly changing, this

                  manual page may be incorrect or out-of-date.  The author(s) assume no

                  responsibility for errors or omissions, or for damages resulting from

                  the use of the information contained herein.  The author(s) may not

                  have taken the same level of care in the production of this manual,

                  which is licensed free of charge, as they might when working

                  professionally.

                  Formatted or processed versions of this manual, if unaccompanied by

                  the source, must acknowledge the copyright and authors of this work.

