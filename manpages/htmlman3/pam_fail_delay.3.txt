

Linux
          manual pages
Section 3
 

 
 

 
Name
pam_fail_delay — request a delay on failure

Synopsis

 

#include <security/pam_appl.h>

int
            pam_fail_delay(
pam_handle_t *pamh,

 
unsigned int usec);

           
        

 
DESCRIPTION
The pam_fail_delay function
      provides a mechanism by which an application or module can
      suggest a minimum delay of usec micro-seconds. The function
      keeps a record of the longest time requested with this
      function. Should pam_authenticate(3) fail,
      the failing return to the application is delayed by an amount
      of time randomly distributed (by up to 25%) about this
      longest value.
Independent of success, the delay time is reset to its
      zero default value when the PAM service module returns
      control to the application. The delay occurs after all authentication modules
      have been called, but before control is returned to the
      service application.
When using this function the programmer should check if it
      is available with:

#ifdef HAVE_PAM_FAIL_DELAY
    ....
#endif /* HAVE_PAM_FAIL_DELAY */
      

For applications written with a single thread that are
      event driven in nature, generating this delay may be
      undesirable. Instead, the application may want to register
      the delay in some other way. For example, in a single
      threaded server that serves multiple authentication requests
      from a single event loop, the application might want to
      simply mark a given connection as blocked until an
      application timer expires. For this reason the delay function
      can be changed with the PAM_FAIL_DELAY item. It can be
      queried and set with pam_get_item(3) and
      pam_set_item (3) respectively.
      The value used to set it should be a function pointer of the
      following prototype:

void (*delay_fn)(int retval, unsigned usec_delay, void *appdata_ptr);
      

The arguments being the retval return code of the module
      stack, the usec_delay
      micro-second delay that libpam is requesting and the
      appdata_ptr that the
      application has associated with the current pamh. This last value was set by
      the application when it called pam_start(3) or explicitly
      with pam_set_item(3). Note, if
      PAM_FAIL_DELAY item is unset (or set to NULL), then no delay
      will be performed.

 
RATIONALE
It is often possible to attack an authentication scheme by
      exploiting the time it takes the scheme to deny access to an
      applicant user. In cases of short timeouts, it may prove
      possible to attempt a brute
      force dictionary attack -- with an automated
      process, the attacker tries all possible passwords to gain
      access to the system. In other cases, where individual
      failures can take measurable amounts of time (indicating the
      nature of the failure), an attacker can obtain useful
      information about the authentication process. These latter
      attacks make use of procedural delays that constitute a
      covert channel of
      useful information.
To minimize the effectiveness of such attacks, it is
      desirable to introduce a random delay in a failed
      authentication process. Preferable this value should be set
      by the application or a special PAM module. Standard PAM
      modules should not modify the delay unconditional.

 
EXAMPLE
For example, a login application may require a failure
      delay of roughly 3 seconds. It will contain the following
      code:

    pam_fail_delay (pamh, 3000000 /* micro-seconds */ );
    pam_authenticate (pamh, 0);
    

if the modules do not request a delay, the failure delay
      will be between 2.25 and 3.75 seconds.
However, the modules, invoked in the authentication
      process, may also request delays:

module #1:    pam_fail_delay (pamh, 2000000);
module #2:    pam_fail_delay (pamh, 4000000);
    

in this case, it is the largest requested value that is
      used to compute the actual failed delay: here between 3 and 5
      seconds.

 
RETURN VALUES

PAM_SUCCESS

Delay was successful adjusted.

PAM_SYSTEM_ERR

A NULL pointer was submitted as PAM handle.

 
SEE ALSO
pam_start(3), pam_get_item(3), pam_strerror(3)

 
STANDARDS
The pam_fail_delay function
      is an Linux-PAM extension.

                  See Linux-PAM copyright notice for more information.
                

