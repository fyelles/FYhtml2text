

Linux
          manual pages
Section 3
 

 
 

Name
longjmp, siglongjmp — nonlocal jump to a saved stack
      context

Synopsis

#include <setjmp.h>

void
            longjmp(
jmp_buf env,

 
int val);

           
        

void
            siglongjmp(
sigjmp_buf env,

 
int val);

           
        

Note

Feature Test Macro Requirements
                      for glibc (see feature_test_macros(7)):

siglongjmp():

_POSIX_C_SOURCE
                      >= 1 || _XOPEN_SOURCE ||
                      _POSIX_C_SOURCE

 
DESCRIPTION
longjmp() and setjmp(3) are useful for
      dealing with errors and interrupts encountered in a low-level
      subroutine of a program. longjmp() restores the environment saved by
      the last call of setjmp(3) with the
      corresponding env
      argument. After longjmp() is
      completed, program execution continues as if the
      corresponding call of setjmp(3) had just returned
      the value val.
      longjmp() cannot cause 0 to be
      returned. If longjmp() is
      invoked with a second argument of 0, 1 will be returned
      instead.
siglongjmp() is similar to
      longjmp() except for the type
      of its env argument.
      If, and only if, the sigsetjmp(3) call that set
      this env used a
      nonzero savesigs
      flag, siglongjmp() also
      restores the signal mask that was saved by sigsetjmp(3).

 
RETURN VALUE
These functions never return.

 
CONFORMING TO
C89, C99, and POSIX.1-2001 specify longjmp(). POSIX.1-2001 specifies
      siglongjmp().

 
NOTES
POSIX does not specify whether longjmp() will restore the signal context
      (see setjmp(3) for some more
      details). If you want to portably save and restore signal
      masks, use sigsetjmp() and
      siglongjmp().
The values of automatic variables are unspecified after a
      call to longjmp() if they meet
      all the following criteria:

they are local to the function that made the
            corresponding setjmp(3) call;

their values are changed between the calls to
            setjmp(3) and
            longjmp(); and

they are not declared as volatile.

Analogous remarks apply for siglongjmp().
longjmp() and siglongjmp() make programs hard to
      understand and maintain. If possible an alternative should be
      used.

 
SEE ALSO
setjmp(3), sigsetjmp(3)

 
COLOPHON
This page is part of release 3.33 of the Linux man-pages project. A
      description of the project, and information about reporting
      bugs, can be found at http://man7.org/linux/man-pages/.

                    Written by Michael Haardt, Fri Nov 25 14:51:42 MET 1994

                  This is free documentation; you can redistribute it and/or

                  modify it under the terms of the GNU General Public License as

                  published by the Free Software Foundation; either version 2 of

                  the License, or (at your option) any later version.

                  The GNU General Public License's references to "object code"

                  and "executables" are to be interpreted as the output of any

                  document formatting or typesetting system, including

                  intermediate and printed output.

                  This manual is distributed in the hope that it will be useful,

                  but WITHOUT ANY WARRANTY; without even the implied warranty of

                  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the

                  GNU General Public License for more details.

                  You should have received a copy of the GNU General Public

                  License along with this manual; if not, write to the Free

                  Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111,

                  USA.

                  Added siglongjmp, Sun Mar  2 22:03:05 EST 1997, jrvdocument.write('@');(@)vanzandt.mv.com

                  Modifications, Sun Feb 26 14:39:45 1995, faithdocument.write('@');(@)cs.unc.edu

                  "

