

Linux
          manual pages
Section 3
 

 
 

Name
getifaddrs, freeifaddrs — get interface
      addresses

Synopsis

#include <sys/types.h>
#include <ifaddrs.h>

int
            getifaddrs(
struct ifaddrs **ifap);

           
        

void
            freeifaddrs(
struct ifaddrs *ifa);

           
        

 
DESCRIPTION
The getifaddrs() function
      creates a linked list of structures describing the network
      interfaces of the local system, and stores the address of the
      first item of the list in *ifap. The list consists of
      ifaddrs structures, defined
      as follows:

struct ifaddrs {
    struct ifaddrs  *ifa_next;    /* Next item in list */
    char            *ifa_name;    /* Name of interface */
    unsigned int     ifa_flags;   /* Flags from SIOCGIFFLAGS */
    struct sockaddr *ifa_addr;    /* Address of interface */
    struct sockaddr *ifa_netmask; /* Netmask of interface */
    union {
        struct sockaddr *ifu_broadaddr;
                         /* Broadcast address of interface */
        struct sockaddr *ifu_dstaddr;
                         /* Point-to-point destination address */
    } ifa_ifu;
#define              ifa_broadaddr ifa_ifu.ifu_broadaddr
#define              ifa_dstaddr   ifa_ifu.ifu_dstaddr
    void            *ifa_data;    /* Address-specific data */
};

The ifa_next field contains
      a pointer to the next structure on the list, or NULL if this
      is the last item of the list.
The ifa_name points to the
      null-terminated interface name.
The ifa_flags field contains
      the interface flags, as returned by the SIOCGIFFLAGS ioctl(2) operation (see
      netdevice(7) for a list of
      these flags).
The ifa_addr field points to
      a structure containing the interface address. (The
      sa_family subfield should be
      consulted to determine the format of the address
      structure.)
The ifa_netmask field points
      to a structure containing the netmask associated with
      ifa_addr, if applicable for the
      address family.
Depending on whether the bit IFF_BROADCAST or IFF_POINTOPOINT is set in ifa_flags (only one can be set at a time),
      either ifa_broadaddr will
      contain the broadcast address associated with ifa_addr (if applicable for the address
      family) or ifa_dstaddr will
      contain the destination address of the point-to-point
      interface.
The ifa_data field points to
      a buffer containing address-family-specific data; this field
      may be NULL if there is no such data for this interface.
The data returned by getifaddrs() is dynamically allocated and
      should be freed using freeifaddrs() when no longer needed.

 
RETURN VALUES
On success, getifaddrs()
      returns zero; on error, −1 is returned, and
      errno is set appropriately.

 
ERRORS
getifaddrs() may fail and
      set errno for any of the errors
      specified for socket(2), bind(2), getsockname(2), recvmsg(2), sendto(2), malloc(3), or realloc(3).

 
VERSIONS
The getifaddrs() function
      first appeared in glibc 2.3, but before glibc 2.3.3, the
      implementation only supported IPv4 addresses; IPv6 support
      was added in glibc 2.3.3. Support of address families other
      than IPv4 is only available on kernels that support
      netlink.

 
CONFORMING TO
Not in POSIX.1-2001. This function first appeared in BSDi
      and is present on the BSD systems, but with slightly
      different semantics documented—returning one entry per
      interface, not per address. This means ifa_addr and other fields can actually be
      NULL if the interface has no address, and no link-level
      address is returned if the interface has an IP address
      assigned. Also, the way of choosing either ifa_broadaddr or ifa_dstaddr differs on various systems.

 
NOTES
The addresses returned on Linux will usually be the IPv4
      and IPv6 addresses assigned to the interface, but also one
      AF_PACKET address per interface
      containing lower-level details about the interface and its
      physical layer. In this case, the ifa_data field may contain a pointer to a
      struct
      net_device_stats, defined in <linux/netdevice.h> which contains various interface
      attributes and statistics.

 
EXAMPLE
The program below demonstrates the use of getifaddrs(), freeifaddrs(), and getnameinfo(3). Here is
      what we see when running this program on one system:

$ ./a.out
lo      address family: 17 (AF_PACKET)
eth0    address family: 17 (AF_PACKET)
lo      address family: 2 (AF_INET)
        address: <127.0.0.1>
eth0    address family: 2 (AF_INET)
        address: <10.1.1.4>
lo      address family: 10 (AF_INET6)
        address: <::1>
eth0    address family: 10 (AF_INET6)
        address: <fe80::2d0:59ff:feda:eb51%eth0>

 
Program source

#include <arpa/inet.h>
#include <sys/socket.h>
#include <netdb.h>
#include <ifaddrs.h>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>

int
main(int argc, char *argv[])
{
    struct ifaddrs *ifaddr, *ifa;
    int family, s;
    char host[NI_MAXHOST];

    if (getifaddrs(&ifaddr) == −1) {
        perror("getifaddrs");
        exit(EXIT_FAILURE);
    }

    /* Walk through linked list, maintaining head pointer so we
       can free list later */

    for (ifa = ifaddr; ifa != NULL; ifa = ifa−>ifa_next) {
        if (ifa−>ifa_addr == NULL)
            continue;

        family = ifa−>ifa_addr−>sa_family;

        /* Display interface name and family (including symbolic
           form of the latter for the common families) */

        printf("%s        address family: %d%s\n",
                ifa−>ifa_name, family,
                (family == AF_PACKET) ? " (AF_PACKET)" :
                (family == AF_INET) ?   " (AF_INET)" :
                (family == AF_INET6) ?  " (AF_INET6)" : "");

        /* For an AF_INET* interface address, display the address */

        if (family == AF_INET || family == AF_INET6) {
            s = getnameinfo(ifa−>ifa_addr,
                    (family == AF_INET) ? sizeof(struct sockaddr_in) :
                                          sizeof(struct sockaddr_in6),
                    host, NI_MAXHOST, NULL, 0, NI_NUMERICHOST);
            if (s != 0) {
                printf("getnameinfo() failed: %s\n", gai_strerror(s));
                exit(EXIT_FAILURE);
            }
            printf("\taddress: <%s>\n", host);
        }
    }

    freeifaddrs(ifaddr);
    exit(EXIT_SUCCESS);
}

 
SEE ALSO
bind(2), getsockname(2), socket(2), packet(7), ifconfig(8)

 
COLOPHON
This page is part of release 3.33 of the Linux man-pages project. A
      description of the project, and information about reporting
      bugs, can be found at http://man7.org/linux/man-pages/.

                    Copyright (c) 2008 Petr Baudis <paskydocument.write('@');(@)suse.cz>

                  and copyright (c) 2009, Linux Foundation, written by Michael Kerrisk

                      <mtk.manpagesdocument.write('@');(@)gmail.com>

                  Permission is granted to make and distribute verbatim copies of this

                  manual provided the copyright notice and this permission notice are

                  preserved on all copies.

                  Permission is granted to copy and distribute modified versions of this

                  manual under the conditions for verbatim copying, provided that the

                  entire resulting derived work is distributed under the terms of a

                  permission notice identical to this one.

                  Since the Linux kernel and libraries are constantly changing, this

                  manual page may be incorrect or out-of-date.  The author(s) assume no

                  responsibility for errors or omissions, or for damages resulting from

                  the use of the information contained herein.  The author(s) may not

                  have taken the same level of care in the production of this manual,

                  which is licensed free of charge, as they might when working

                  professionally.

                  Formatted or processed versions of this manual, if unaccompanied by

                  the source, must acknowledge the copyright and authors of this work.

                  Redistribution and use in source and binary forms, with or without

                  modification, are permitted provided that the following conditions

                  are met:

                  2008-12-08 Petr Baudis <paskydocument.write('@');(@)suse.cz>

                     Rewrite the BSD manpage in the Linux man pages style and account

                     for glibc specificities, provide an example.

                  2009-01-14 mtk, many edits and changes, rewrote example program.

