

Linux
          manual pages
Section 3
 

 
 

Name
pthread_sigmask — examine and change mask of blocked
      signals

Synopsis

#include <signal.h>

int
            pthread_sigmask(
int how,

 
const sigset_t *set,

 
sigset_t *oldset);

           
        

Note

Compile and link with −pthread.

 
DESCRIPTION
The pthread_sigmask()
      function is just like sigprocmask(2), with the
      difference that its use in multithreaded programs is
      explicitly specified by POSIX.1-2001. Other differences are
      noted in this page.
For a description of the arguments and operation of this
      function, see sigprocmask(2).

 
RETURN VALUE
On success, pthread_sigmask() returns 0; on error, it
      returns an error number.

 
ERRORS
See sigprocmask(2).

 
CONFORMING TO
POSIX.1-2001.

 
NOTES
A new thread inherits a copy of its creator's signal
      mask.

 
EXAMPLE
The program below blocks some signals in the main thread,
      and then creates a dedicated thread to fetch those signals
      via sigwait(3). The following
      shell session demonstrates its use:

$ ./a.out &
[1] 5423
$ kill −QUIT %1
Signal handling thread got signal 3
$ kill −USR1 %1
Signal handling thread got signal 10
$ kill −TERM %1
[1]+  Terminated              ./a.out

 
Program source

#include <pthread.h>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <signal.h>
#include <errno.h>

/* Simple error handling functions */

#define handle_error_en(en, msg) \
        do { errno = en; perror(msg); exit(EXIT_FAILURE); } while (0)

static void *
sig_thread(void *arg)
{
    sigset_t *set = (sigset_t *) arg;
    int s, sig;

    for (;;) {
        s = sigwait(set, &sig);
        if (s != 0)
            handle_error_en(s, "sigwait");
        printf("Signal handling thread got signal %d\n", sig);
    }
}

int
main(int argc, char *argv[])
{
    pthread_t thread;
    sigset_t set;
    int s;

    /* Block SIGINT; other threads created by main() will inherit
       a copy of the signal mask. */

    sigemptyset(&set);
    sigaddset(&set, SIGQUIT);
    sigaddset(&set, SIGUSR1);
    s = pthread_sigmask(SIG_BLOCK, &set, NULL);
    if (s != 0)
        handle_error_en(s, "pthread_sigmask");

    s = pthread_create(&thread, NULL, &sig_thread, (void *) &set);
    if (s != 0)
        handle_error_en(s, "pthread_create");

    /* Main thread carries on to create other threads and/or do
       other work */

    pause();            /* Dummy pause so we can test program */
}

 
SEE ALSO
sigaction(2), sigpending(2), sigprocmask(2) pthread_create(3),
      pthread_kill(3), sigsetops(3), pthreads(7), signal(7)

 
COLOPHON
This page is part of release 3.33 of the Linux man-pages project. A
      description of the project, and information about reporting
      bugs, can be found at http://man7.org/linux/man-pages/.

                    Copyright (c) 2009 Linux Foundation, written by Michael Kerrisk

                      <mtk.manpagesdocument.write('@');(@)gmail.com>

                  Permission is granted to make and distribute verbatim copies of this

                  manual provided the copyright notice and this permission notice are

                  preserved on all copies.

                  Permission is granted to copy and distribute modified versions of this

                  manual under the conditions for verbatim copying, provided that the

                  entire resulting derived work is distributed under the terms of a

                  permission notice identical to this one.

                  Since the Linux kernel and libraries are constantly changing, this

                  manual page may be incorrect or out-of-date.  The author(s) assume no

                  responsibility for errors or omissions, or for damages resulting from

                  the use of the information contained herein.  The author(s) may not

                  have taken the same level of care in the production of this manual,

                  which is licensed free of charge, as they might when working

                  professionally.

                  Formatted or processed versions of this manual, if unaccompanied by

                  the source, must acknowledge the copyright and authors of this work.

