

Linux
          manual pages
Section 3
 

 
 

Name
pthread_cleanup_push_defer_np,
      pthread_cleanup_pop_restore_np — push and pop thread
      cancellation clean-up handlers while saving cancelability
      type

Synopsis

#include <pthread.h>

void
            pthread_cleanup_push_defer_np(
void (*routine)(void
            *),

 
void *arg);

           
        

void
            pthread_cleanup_pop_restore_np(
int execute);

           
        

Note

Compile and link with −pthread.

 
DESCRIPTION
These functions are the same as pthread_cleanup_push(3) and
      pthread_cleanup_pop(3),
      except for the differences noted on this page.
Like pthread_cleanup_push(3),
      pthread_cleanup_push_defer_np()
      pushes routine onto
      the thread's stack of cancellation clean-up handlers. In
      addition, it also saves the thread's current cancelability
      type, and sets the cancelability type to "deferred" (see
      pthread_setcanceltype(3));
      this ensures that cancellation clean-up will occur even if
      the thread's cancelability type was "asynchronous" before the
      the call.
Like pthread_cleanup_pop(3),
      pthread_cleanup_pop_restore_np() pops the
      top-most clean-up handler from the thread's stack of
      cancellation clean-up handlers. In addition, it restores the
      thread's cancelability type to its value at the time of the
      matching pthread_cleanup_push_defer_np().
The caller must ensure that calls to these functions are
      paired within the same function, and at the same lexical
      nesting level. Other restrictions apply, as described in
      pthread_cleanup_push(3).
This sequence of calls:

pthread_cleanup_push_defer_np(routine, arg);
pthread_cleanup_pop_restore_np(execute);

is equivalent to (but shorter and more efficient
      than):

int oldtype;

pthread_cleanup_push(routine, arg);
pthread_setcanceltype(PTHREAD_CANCEL_DEFERRED, &oldtype);
...
pthread_setcanceltype(oldtype, NULL);
pthread_cleanup_pop(execute);

 
CONFORMING TO
These functions are nonstandard GNU extensions; hence the
      suffix "_np" (nonportable) in the names.

 
SEE ALSO
pthread_cancel(3),
      pthread_cleanup_push(3),
      pthread_setcancelstate(3),
      pthread_testcancel(3),
      pthreads(7)

 
COLOPHON
This page is part of release 3.33 of the Linux man-pages project. A
      description of the project, and information about reporting
      bugs, can be found at http://man7.org/linux/man-pages/.

                    Copyright (c) 2008 Linux Foundation, written by Michael Kerrisk

                      <mtk.manpagesdocument.write('@');(@)gmail.com>

                  Permission is granted to make and distribute verbatim copies of this

                  manual provided the copyright notice and this permission notice are

                  preserved on all copies.

                  Permission is granted to copy and distribute modified versions of this

                  manual under the conditions for verbatim copying, provided that the

                  entire resulting derived work is distributed under the terms of a

                  permission notice identical to this one.

                  Since the Linux kernel and libraries are constantly changing, this

                  manual page may be incorrect or out-of-date.  The author(s) assume no

                  responsibility for errors or omissions, or for damages resulting from

                  the use of the information contained herein.  The author(s) may not

                  have taken the same level of care in the production of this manual,

                  which is licensed free of charge, as they might when working

                  professionally.

                  Formatted or processed versions of this manual, if unaccompanied by

                  the source, must acknowledge the copyright and authors of this work.

