

Linux
          manual pages
Section 3
 

 
 

Name
ualarm — schedule signal after given number of
      microseconds

Synopsis

#include <unistd.h>

useconds_t
            ualarm(
useconds_t usecs,

 
useconds_t interval);

           
        

Note

Feature Test Macro Requirements
                      for glibc (see feature_test_macros(7)):

ualarm():

Since
                      glibc 2.12:

_BSD_SOURCE ||
                      (_XOPEN_SOURCE
                      >= 500 || _XOPEN_SOURCE &&
                      _XOPEN_SOURCE_EXTENDED)
                      && !(_POSIX_C_SOURCE >=
                      200809L || _XOPEN_SOURCE >=
                      700)

Before
                      glibc 2.12:

_BSD_SOURCE ||
                      _XOPEN_SOURCE
                      >= 500 || _XOPEN_SOURCE &&
                      _XOPEN_SOURCE_EXTENDED

 
DESCRIPTION
The ualarm() function causes
      the signal SIGALRM to be sent
      to the invoking process after (not less than) usecs microseconds. The delay
      may be lengthened slightly by any system activity or by the
      time spent processing the call or by the granularity of
      system timers.
Unless caught or ignored, the SIGALRM signal will terminate the
      process.
If the interval
      argument is nonzero, further SIGALRM signals will be sent every
      interval microseconds
      after the first.

 
RETURN VALUE
This function returns the number of microseconds remaining
      for any alarm that was previously set, or 0 if no alarm was
      pending.

 
ERRORS

EINTR

Interrupted by a signal.

EINVAL

usecs or
            interval is not
            smaller than 1000000. (On systems where that is
            considered an error.)

 
CONFORMING TO
4.3BSD, POSIX.1-2001. POSIX.1-2001 marks ualarm() as obsolete. POSIX.1-2008 removes
      the specification of ualarm().
      4.3BSD, SUSv2, and POSIX do not define any errors.

 
NOTES
The type useconds_t is an
      unsigned integer type capable of holding integers in the
      range [0,1000000]. On the original BSD implementation, and in
      glibc before version 2.1, the arguments to ualarm() were instead typed as unsigned int. Programs will be more portable if
      they never mention useconds_t
      explicitly.
The interaction of this function with other timer
      functions such as alarm(2), sleep(3), nanosleep(2), setitimer(2), timer_create(2), timer_delete(2), timer_getoverrun(2),
      timer_gettime(2), timer_settime(2), usleep(3) is
      unspecified.
This function is obsolete. Use setitimer(2) or POSIX
      interval timers (timer_create(2), etc.)
      instead.

 
SEE ALSO
alarm(2), getitimer(2), nanosleep(2), select(2), setitimer(2), usleep(3), time(7)

 
COLOPHON
This page is part of release 3.33 of the Linux man-pages project. A
      description of the project, and information about reporting
      bugs, can be found at http://man7.org/linux/man-pages/.

                    Copyright (c) 2003 Andries Brouwer (aebdocument.write('@');(@)cwi.nl)

                  This is free documentation; you can redistribute it and/or

                  modify it under the terms of the GNU General Public License as

                  published by the Free Software Foundation; either version 2 of

                  the License, or (at your option) any later version.

                  The GNU General Public License's references to "object code"

                  and "executables" are to be interpreted as the output of any

                  document formatting or typesetting system, including

                  intermediate and printed output.

                  This manual is distributed in the hope that it will be useful,

                  but WITHOUT ANY WARRANTY; without even the implied warranty of

                  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the

                  GNU General Public License for more details.

                  You should have received a copy of the GNU General Public

                  License along with this manual; if not, write to the Free

                  Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111,

                  USA.

