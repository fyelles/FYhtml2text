

Linux
          manual pages
Section 3
 

 
 

Name
strtoul, strtoull, strtouq — convert a string to an
      unsigned long integer

Synopsis

#include <stdlib.h>

unsigned long int
            strtoul(
const char *nptr,

 
char **endptr,

 
int base);

           
        

unsigned long long int
            strtoull(
const char *nptr,

 
char **endptr,

 
int base);

           
        

Note

Feature Test Macro Requirements
                      for glibc (see feature_test_macros(7)):

strtoull():

                      XOPEN_SOURCE >= 600 || _BSD_SOURCE || _SVID_SOURCE ||
                      _ISOC99_SOURCE
                      || _POSIX_C_SOURCE >=
                      200112L;

or
                      cc
-std=c99

 
DESCRIPTION
The strtoul() function
      converts the initial part of the string in nptr to an unsigned long int value according to the given
      base, which must be
      between 2 and 36 inclusive, or be the special value 0.
The string may begin with an arbitrary amount of white
      space (as determined by isspace(3)) followed by a
      single optional '+' or '−' sign. If base is zero or 16, the string
      may then include a "0x" prefix, and the number will be read
      in base 16; otherwise, a zero base is taken as 10 (decimal)
      unless the next character is '0', in which case it is taken
      as 8 (octal).
The remainder of the string is converted to an
      unsigned long int value in the
      obvious manner, stopping at the first character which is not
      a valid digit in the given base. (In bases above 10, the
      letter 'A' in either upper or lower case represents 10, 'B'
      represents 11, and so forth, with 'Z' representing 35.)
If endptr is not
      NULL, strtoul() stores the
      address of the first invalid character in *endptr. If there were no digits
      at all, strtoul() stores the
      original value of nptr in *endptr (and returns 0). In
      particular, if *nptr
      is not '\0' but **endptr is '\0' on return, the
      entire string is valid.
The strtoull() function
      works just like the strtoul()
      function but returns an unsigned long long
      int value.

 
RETURN VALUE
The strtoul() function
      returns either the result of the conversion or, if there was
      a leading minus sign, the negation of the result of the
      conversion represented as an unsigned value, unless the
      original (nonnegated) value would overflow; in the latter
      case, strtoul() returns
      ULONG_MAX and sets errno to ERANGE. Precisely the same holds for
      strtoull() (with ULLONG_MAX instead of ULONG_MAX).

 
ERRORS

EINVAL

(not in C99) The given base contains an
            unsupported value.

ERANGE

The resulting value was out of range.

The implementation may also set errno to EINVAL in case no conversion was performed
      (no digits seen, and 0 returned).

 
CONFORMING TO
strtoul() conforms to SVr4,
      C89, C99 and POSIX-2001, and strtoull() to C99 and POSIX.1-2001.

 
NOTES
Since strtoul() can
      legitimately return 0 or ULONG_MAX (ULLONG_MAX for strtoull()) on both success and failure,
      the calling program should set errno to 0 before the call, and then
      determine if an error occurred by checking whether
      errno has a nonzero value after
      the call.
In locales other than the "C" locale, other strings may be
      accepted. (For example, the thousands separator of the
      current locale may be supported.)
BSD also has

  u_quad_t strtouq(const char *nptr, char **endptr, int base);

with completely analogous definition. Depending on the
      wordsize of the current architecture, this may be equivalent
      to strtoull() or to
      strtoul().
Negative values are considered valid input and are
      silently converted to the equivalent unsigned long int value.

 
EXAMPLE
See the example on the strtol(3) manual page; the
      use of the functions described in this manual page is
      similar.

 
SEE ALSO
atof(3), atoi(3), atol(3), strtod(3), strtol(3)

 
COLOPHON
This page is part of release 3.33 of the Linux man-pages project. A
      description of the project, and information about reporting
      bugs, can be found at http://man7.org/linux/man-pages/.

                    Copyright 1993 David Metcalfe (daviddocument.write('@');(@)prism.demon.co.uk)

                  Permission is granted to make and distribute verbatim copies of this

                  manual provided the copyright notice and this permission notice are

                  preserved on all copies.

                  Permission is granted to copy and distribute modified versions of this

                  manual under the conditions for verbatim copying, provided that the

                  entire resulting derived work is distributed under the terms of a

                  permission notice identical to this one.

                  Since the Linux kernel and libraries are constantly changing, this

                  manual page may be incorrect or out-of-date.  The author(s) assume no

                  responsibility for errors or omissions, or for damages resulting from

                  the use of the information contained herein.  The author(s) may not

                  have taken the same level of care in the production of this manual,

                  which is licensed free of charge, as they might when working

                  professionally.

                  Formatted or processed versions of this manual, if unaccompanied by

                  the source, must acknowledge the copyright and authors of this work.

                  References consulted:
                      Linux libc source code

                      Lewine's _POSIX Programmer's Guide_ (O'Reilly & Associates, 1991)

                      386BSD man pages

                  Modified Sun Jul 25 10:54:03 1993 by Rik Faith (faithdocument.write('@');(@)cs.unc.edu)

                  Fixed typo, aeb, 950823
                  2002-02-22, joey, mihtjel: Added strtoull()

