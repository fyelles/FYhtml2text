

Linux
          manual pages
Section 3
 

 
 

Name
getnetent_r, getnetbyname_r, getnetbyaddr_r — get
      network entry (reentrant)

Synopsis

#include <netdb.h>

int
            getnetent_r(
struct netent *result_buf,

 
char *buf,

 
size_t buflen,

 
struct netent **result,

 
int *h_errnop);

           
        

int
            getnetbyname_r(
const char *name,

 
struct netent *result_buf,

 
char *buf,

 
size_t buflen,

 
struct netent **result,

 
int *h_errnop);

           
        

int
            getnetbyaddr_r(
uint32_t net,

 
int type,

 
struct netent *result_buf,

 
char *buf,

 
size_t buflen,

 
struct netent **result,

 
int *h_errnop);

           
        

Note

Feature Test Macro Requirements
                      for glibc (see feature_test_macros(7)):

getnetent_r(), getnetbyname_r(),
                      getnetbyaddr_r():

_BSD_SOURCE ||
                      _SVID_SOURCE

 
DESCRIPTION
The getnetent_r(),
      getnetbyname_r(), and
      getnetbyaddr_r() functions are
      the reentrant equivalents of, respectively, getnetent(3), getnetbyname(3), and
      getnetbynumber(3). They differ
      in the way that the netent
      structure is returned, and in the function calling signature
      and return value. This manual page describes just the
      differences from the nonreentrant functions.
Instead of returning a pointer to a statically allocated
      netent structure as the
      function result, these functions copy the structure into the
      location pointed to by result_buf.
The buf array is
      used to store the string fields pointed to by the returned
      netent structure. (The
      nonreentrant functions allocate these strings in static
      storage.) The size of this array is specified in buflen. If buf is too small, the call
      fails with the error ERANGE,
      and the caller must try again with a larger buffer. (A buffer
      of length 1024 bytes should be sufficient for most
      applications.)
If the function call successfully obtains a network
      record, then *result
      is set pointing to result_buf; otherwise,
      *result is set to
      NULL.
The buffer pointed to by h_errnop is used to return the
      value that would be stored in the global variable
      h_errno by the nonreentrant
      versions of these functions.

 
RETURN VALUE
On success, these functions return 0. On error, they
      return one of the positive error numbers listed in
      ERRORS.
On error, record not found (getnetbyname_r(), getnetbyaddr_r()), or end of input
      (getnetent_r()) result is set to NULL.

 
ERRORS

ENOENT

(getnetent_r()) No
            more records in database.

ERANGE

buf is too
            small. Try again with a larger buffer (and increased
            buflen).

 
CONFORMING TO
These functions are GNU extensions. Functions with similar
      names exist on some other systems, though typically with
      different calling signatures.

 
SEE ALSO
getnetent(3), networks(5)

 
COLOPHON
This page is part of release 3.33 of the Linux man-pages project. A
      description of the project, and information about reporting
      bugs, can be found at http://man7.org/linux/man-pages/.

                    Copyright 2008, Linux Foundation, written by Michael Kerrisk

                  <mtk.manpagesdocument.write('@');(@)gmail.com>

                  Permission is granted to make and distribute verbatim copies of this

                  manual provided the copyright notice and this permission notice are

                  preserved on all copies.

                  Permission is granted to copy and distribute modified versions of this

                  manual under the conditions for verbatim copying, provided that the

                  entire resulting derived work is distributed under the terms of a

                  permission notice identical to this one.

                  Since the Linux kernel and libraries are constantly changing, this

                  manual page may be incorrect or out-of-date.  The author(s) assume no

                  responsibility for errors or omissions, or for damages resulting from

                  the use of the information contained herein.  The author(s) may not

                  have taken the same level of care in the production of this manual,

                  which is licensed free of charge, as they might when working

                  professionally.

                  Formatted or processed versions of this manual, if unaccompanied by

                  the source, must acknowledge the copyright and authors of this work.

