

Linux
          manual pages
Section 3
 

 
 

Name
pthread_exit — terminate calling thread

Synopsis

#include <pthread.h>

void
            pthread_exit(
void *retval);

           
        

Note

Compile and link with −pthread.

 
DESCRIPTION
The pthread_exit() function
      terminates the calling thread and returns a value via
      retval that (if the
      thread is joinable) is available to another thread in the
      same process that calls pthread_join(3).
Any clean-up handlers established by pthread_cleanup_push(3)
      that have not yet been popped, are popped (in the reverse of
      the order in which they were pushed) and executed. If the
      thread has any thread-specific data, then, after the clean-up
      handlers have been executed, the corresponding destructor
      functions are called, in an unspecified order.
When a thread terminates, process-shared resources (e.g.,
      mutexes, condition variables, semaphores, and file
      descriptors) are not released, and functions registered using
      atexit(3) are not
      called.
After the last thread in a process terminates, the process
      terminates as by calling exit(3) with an exit status
      of zero; thus, process-shared resources are released and
      functions registered using atexit(3) are called.

 
RETURN VALUE
This function does not return to the caller.

 
ERRORS
This function always succeeds.

 
CONFORMING TO
POSIX.1-2001.

 
NOTES
Performing a return from the start function of any thread
      other than the main thread results in an implicit call to
      pthread_exit(), using the
      function's return value as the thread's exit status.
To allow other threads to continue execution, the main
      thread should terminate by calling pthread_exit() rather than exit(3).
The value pointed to by retval should not be located on
      the calling thread's stack, since the contents of that stack
      are undefined after the thread terminates.

 
BUGS
Currently, there are limitations in the kernel
      implementation logic for wait(2)ing on a stopped
      thread group with a dead thread group leader. This can
      manifest in problems such as a locked terminal if a stop
      signal is sent to a foreground process whose thread group
      leader has already called pthread_exit().

 
SEE ALSO
pthread_create(3),
      pthread_join(3), pthreads(7)

 
COLOPHON
This page is part of release 3.33 of the Linux man-pages project. A
      description of the project, and information about reporting
      bugs, can be found at http://man7.org/linux/man-pages/.

                    Copyright (c) 2008 Linux Foundation, written by Michael Kerrisk

                      <mtk.manpagesdocument.write('@');(@)gmail.com>

                  Permission is granted to make and distribute verbatim copies of this

                  manual provided the copyright notice and this permission notice are

                  preserved on all copies.

                  Permission is granted to copy and distribute modified versions of this

                  manual under the conditions for verbatim copying, provided that the

                  entire resulting derived work is distributed under the terms of a

                  permission notice identical to this one.

                  Since the Linux kernel and libraries are constantly changing, this

                  manual page may be incorrect or out-of-date.  The author(s) assume no

                  responsibility for errors or omissions, or for damages resulting from

                  the use of the information contained herein.  The author(s) may not

                  have taken the same level of care in the production of this manual,

                  which is licensed free of charge, as they might when working

                  professionally.

                  Formatted or processed versions of this manual, if unaccompanied by

                  the source, must acknowledge the copyright and authors of this work.

