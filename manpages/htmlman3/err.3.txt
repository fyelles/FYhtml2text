

Linux
          manual pages
Section 3
 

 
 

Name
err, verr, errx, verrx, warn, vwarn, warnx, vwarnx —
      formatted error messages

Synopsis

#include <err.h>

void
            err(
int eval,

 
const char *fmt,

 
...);

           
        

void
            errx(
int eval,

 
const char *fmt,

 
...);

           
        

void
            warn(
const char *fmt,

 
...);

           
        

void
            warnx(
const char *fmt,

 
...);

           
        

#include <stdarg.h>

void
            verr(
int eval,

 
const char *fmt,

 
va_list args);

           
        

void
            verrx(
int eval,

 
const char *fmt,

 
va_list args);

           
        

void
            vwarn(
const char *fmt,

 
va_list args);

           
        

void
            vwarnx(
const char *fmt,

 
va_list args);

           
        

 
DESCRIPTION
The err() and warn() family of functions display a
      formatted error message on the standard error output. In all
      cases, the last component of the program name, a colon
      character, and a space are output. If the fmt argument is not NULL, the
      printf(3)-like formatted
      error message is output. The output is terminated by a
      newline character.
The err(), verr(), warn(), and vwarn() functions append an error message
      obtained from strerror(3) based on the
      global variable errno, preceded
      by another colon and space unless the fmt argument is NULL.
The errx() and warnx() functions do not append an error
      message.
The err(), verr(), errx(), and verrx() functions do not return, but exit
      with the value of the argument eval.

 
EXAMPLES
Display the current errno
      information string and exit:

if ((p = malloc(size)) == NULL)
    err(1, NULL);
if ((fd = open(file_name, O_RDONLY, 0)) == −1)
    err(1, "%s", file_name);

Display an error message and exit:

if (tm.tm_hour < START_TIME)
    errx(1, "too early, wait until %s", start_time_string);

Warn of an error:

if ((fd = open(raw_device, O_RDONLY, 0)) == −1)
    warnx("%s: %s: trying the block device",
            raw_device, strerror(errno));
if ((fd = open(block_device, O_RDONLY, 0)) == −1)
    err(1, "%s", block_device);

 
CONFORMING TO
These functions are nonstandard BSD extensions.

 
SEE ALSO
error(3), exit(3), perror(3), printf(3), strerror(3)

 
COLOPHON
This page is part of release 3.33 of the Linux man-pages project. A
      description of the project, and information about reporting
      bugs, can be found at http://man7.org/linux/man-pages/.

                    Copyright (c) 1993
                  The Regents of the University of California.  All rights reserved.

                  Redistribution and use in source and binary forms, with or without

                  modification, are permitted provided that the following conditions

                  are met:
                  1. Redistributions of source code must retain the above copyright

                     notice, this list of conditions and the following disclaimer.

                  2. Redistributions in binary form must reproduce the above copyright

                     notice, this list of conditions and the following disclaimer in the

                     documentation and/or other materials provided with the distribution.

                  3. All advertising materials mentioning features or use of this software

                     must display the following acknowledgement:

                  This product includes software developed by the University of

                  California, Berkeley and its contributors.

                  4. Neither the name of the University nor the names of its contributors

                     may be used to endorse or promote products derived from this software

                     without specific prior written permission.

                  THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND

                  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE

                  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE

                  ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE

                  FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL

                  DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS

                  OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)

                  HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT

                  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY

                  OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF

                  SUCH DAMAGE.

                  From: document.write('@');(@)(#)err.3
                  8.1 (Berkeley) 6/9/93
                  $FreeBSD: src/lib/libc/gen/err.3,v 1.11.2.5 2001/08/17 15:42:32 ru Exp $

                  2011-09-10, mtk, Converted from mdoc to man macros

