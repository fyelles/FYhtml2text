

Linux
          manual pages
Section 3
 

 
 

Name
setbuf, setbuffer, setlinebuf, setvbuf — stream
      buffering operations

Synopsis

#include <stdio.h>

void
            setbuf(
FILE *stream,

 
char *buf);

           
        

void
            setbuffer(
FILE *stream,

 
char *buf,

 
size_t size);

           
        

void
            setlinebuf(
FILE *stream);

           
        

int
            setvbuf(
FILE *stream,

 
char *buf,

 
int mode,

 
size_t size);

           
        

Note

Feature Test Macro Requirements
                      for glibc (see feature_test_macros(7)):

setbuffer(), setlinebuf():

_BSD_SOURCE

 
DESCRIPTION
The three types of buffering available are unbuffered,
      block buffered, and line buffered. When an output stream is
      unbuffered, information appears on the destination file or
      terminal as soon as written; when it is block buffered many
      characters are saved up and written as a block; when it is
      line buffered characters are saved up until a newline is
      output or input is read from any stream attached to a
      terminal device (typically stdin). The function fflush(3) may be used to
      force the block out early. (See fclose(3).) Normally all
      files are block buffered. When the first I/O operation occurs
      on a file, malloc(3) is called, and a
      buffer is obtained. If a stream refers to a terminal (as
      stdout normally does) it is line
      buffered. The standard error stream stderr is always unbuffered by default.
The setvbuf() function may
      be used on any open stream to change its buffer. The
      mode argument must be
      one of the following three macros:

_IONBF

unbuffered

_IOLBF

line buffered

_IOFBF

fully buffered

Except for unbuffered files, the buf argument should point to a
      buffer at least size
      bytes long; this buffer will be used instead of the current
      buffer. If the argument buf is NULL, only the mode is
      affected; a new buffer will be allocated on the next read or
      write operation. The setvbuf()
      function may only be used after opening a stream and before
      any other operations have been performed on it.
The other three calls are, in effect, simply aliases for
      calls to setvbuf(). The
      setbuf() function is exactly
      equivalent to the call

setvbuf(stream, buf, buf ? _IOFBF : _IONBF,
          BUFSIZ);

The setbuffer() function is
      the same, except that the size of the buffer is up to the
      caller, rather than being determined by the default
      BUFSIZ. The setlinebuf() function is exactly equivalent
      to the call:

setvbuf(stream, (char *) NULL, _IOLBF, 0);

 
RETURN VALUE
The function setvbuf()
      returns 0 on success. It returns nonzero on failure
      (mode is invalid or
      the request cannot be honored). It may set errno on failure.
The other functions do not return a value.

 
CONFORMING TO
The setbuf() and
      setvbuf() functions conform to
      C89 and C99.

 
BUGS
The setbuffer() and
      setlinebuf() functions are not
      portable to versions of BSD before 4.2BSD, and are available
      under Linux since libc 4.5.21. On 4.2BSD and 4.3BSD systems,
      setbuf() always uses a
      suboptimal buffer size and should be avoided.
You must make sure that the space that buf points to still exists by
      the time stream is
      closed, which also happens at program termination. For
      example, the following is invalid:

#include <stdio.h>

int
main(void)
{
    char buf[BUFSIZ];
    setbuf(stdin, buf);
    printf("Hello, world!\n");
    return 0;
}

 
SEE ALSO
fclose(3), fflush(3), fopen(3), fread(3), malloc(3), printf(3), puts(3)

 
COLOPHON
This page is part of release 3.33 of the Linux man-pages project. A
      description of the project, and information about reporting
      bugs, can be found at http://man7.org/linux/man-pages/.

                    Copyright (c) 1980, 1991 Regents of the University of California.

                  All rights reserved.

                  This code is derived from software contributed to Berkeley by

                  the American National Standards Committee X3, on Information

                  Processing Systems.

                  Redistribution and use in source and binary forms, with or without

                  modification, are permitted provided that the following conditions

                  are met:
                  1. Redistributions of source code must retain the above copyright

                     notice, this list of conditions and the following disclaimer.

                  2. Redistributions in binary form must reproduce the above copyright

                     notice, this list of conditions and the following disclaimer in the

                     documentation and/or other materials provided with the distribution.

                  3. All advertising materials mentioning features or use of this software

                     must display the following acknowledgement:

                  This product includes software developed by the University of

                  California, Berkeley and its contributors.

                  4. Neither the name of the University nor the names of its contributors

                     may be used to endorse or promote products derived from this software

                     without specific prior written permission.

                  THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND

                  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE

                  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE

                  ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE

                  FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL

                  DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS

                  OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)

                  HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT

                  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY

                  OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF

                  SUCH DAMAGE.

                      document.write('@');(@)(#)setbuf.3
                  6.10 (Berkeley) 6/29/91

                  Converted for Linux, Mon Nov 29 14:55:24 1993, faithdocument.write('@');(@)cs.unc.edu

                  Added section to BUGS, Sun Mar 12 22:28:33 MET 1995,

                                    Thomas.Koenigdocument.write('@');(@)ciw.uni-karlsruhe.de

                  Correction,  Sun, 11 Apr 1999 15:55:18,

                      Martin Vicente <martindocument.write('@');(@)netadmin.dgac.fr>

                  Correction,  2000-03-03, Andreas Jaeger <ajdocument.write('@');(@)suse.de>

                  Added return value for setvbuf, aeb,

