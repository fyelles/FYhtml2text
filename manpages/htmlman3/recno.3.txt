

Linux
          manual pages
Section 3
 

 
 

Name
recno — record number database access method

Synopsis

#include <sys/types.h>
#include <db.h>
  

 
DESCRIPTION
The routine dbopen(3) is the library
      interface to database files. One of the supported file
      formats is record number files. The general description of
      the database access methods is in dbopen(3), this manual page
      describes only the recno specific information.
The record number data structure is either variable or
      fixed-length records stored in a flat-file format, accessed
      by the logical record number. The existence of record number
      five implies the existence of records one through four, and
      the deletion of record number one causes record number five
      to be renumbered to record number four, as well as the
      cursor, if positioned after record number one, to shift down
      one record.
The recno access method specific data structure provided
      to dbopen(3) is defined in the
      <db.h>
      include file as follows:

                  typedef
struct {

 
unsigned long

                   
flags;
 

 
unsigned int

                   
cachesize;
 

 
unsigned int

                   
psize;
 

 
int

                   
lorder;
 

 
size_t

                   
reclen;
 

 
unsigned char

                   
bval;
 

 
char

                  *
bfname;
 

} RECNOINFO;

The elements of this structure are defined as follows:

flags

The flag value is specified by ORing any of the
            following values:

R_FIXEDLEN

The records are fixed-length, not byte
                      delimited. The structure element reclen
                      specifies the length of the record, and the
                      structure element bval is used as
                      the pad character. Any records, inserted into
                      the database, that are less than reclen bytes
                      long are automatically padded.

R_NOKEY

In the interface specified by dbopen(3),
                      the sequential record retrieval fills in both
                      the caller's key and data structures. If the
                      R_NOKEY flag is
                      specified, the cursor routines
                      are not required to fill in the key
                      structure. This permits applications to
                      retrieve records at the end of files without
                      reading all of the intervening records.

R_SNAPSHOT

This flag requires that a snapshot of the
                      file be taken when dbopen(3)
                      is called, instead of permitting any
                      unmodified records to be read from the
                      original file.

cachesize

A suggested maximum size, in bytes, of the memory
            cache. This value is only advisory, and the
            access method will allocate more memory rather than
            fail. If cachesize is 0 (no size
            is specified) a default cache is used.

psize

The recno access method stores the in-memory copies
            of its records in a btree. This value is the size (in
            bytes) of the pages used for nodes in that tree. If
            psize is 0 (no
            page size is specified) a page size is chosen based on
            the underlying file system I/O block size. See
            btree(3) for more
            information.

lorder

The byte order for integers in the stored database
            metadata. The number should represent the order as an
            integer; for example, big endian order would be the
            number 4,321. If lorder is 0 (no order is
            specified) the current host order is used.

reclen

The length of a fixed-length record.

bval

The delimiting byte to be used to mark the end of a
            record for variable-length records, and the pad
            character for fixed-length records. If no value is
            specified, newlines ("\n") are used to mark the end of
            variable-length records and fixed-length records are
            padded with spaces.

bfname

The recno access method stores the in-memory copies
            of its records in a btree. If bfname is non-NULL, it
            specifies the name of the btree file, as if specified
            as the filename for a dbopen(3) of a btree
            file.

The data part of the key/data pair used by the
      recno access method is the same
      as other access methods. The key is different. The
      data field of the key should be
      a pointer to a memory location of type recno_t, as defined in th <db.h>
      include file. This type is normally the largest unsigned
      integral type available to the implementation. The
      size field of the key should be
      the size of that type.
Because there can be no metadata associated with the
      underlying recno access method files, any changes made to the
      default values (e.g., fixed record length or byte separator
      value) must be explicitly specified each time the file is
      opened.
In the interface specified by dbopen(3), using the
      put interface to create a new
      record will cause the creation of multiple, empty records if
      the record number is more than one greater than the largest
      record currently in the database.

 
ERRORS
The recno access method
      routines may fail and set errno
      for any of the errors specified for the library routine
      dbopen(3) or the
      following:

EINVAL

An attempt was made to add a record to a
            fixed-length database that was too large to fit.

 
BUGS
Only big and little endian byte order is supported.

 
SEE ALSO
btree(3), dbopen(3), hash(3), mpool(3)
Document Processing in a
      Relational Database System, Michael Stonebraker,
      Heidi Stettner, Joseph Kalash, Antonin Guttman, Nadene Lynn,
      Memorandum No. UCB/ERL M82/32, May 1982.

 
COLOPHON
This page is part of release 3.35 of the Linux man-pages project. A
      description of the project, and information about reporting
      bugs, can be found at http://man7.org/linux/man-pages/.

                    Copyright (c) 1990, 1993

                  The Regents of the University of California.  All rights reserved.

                  Redistribution and use in source and binary forms, with or without

                  modification, are permitted provided that the following conditions

                  are met:
                  1. Redistributions of source code must retain the above copyright

                     notice, this list of conditions and the following disclaimer.

                  2. Redistributions in binary form must reproduce the above copyright

                     notice, this list of conditions and the following disclaimer in the

                     documentation and/or other materials provided with the distribution.

                  3. All advertising materials mentioning features or use of this software

                     must display the following acknowledgement:

                  This product includes software developed by the University of

                  California, Berkeley and its contributors.

                  4. Neither the name of the University nor the names of its contributors

                     may be used to endorse or promote products derived from this software

                     without specific prior written permission.

                  THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND

                  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE

                  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE

                  ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE

                  FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL

                  DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS

                  OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)

                  HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT

                  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY

                  OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF

                  SUCH DAMAGE.

document.write('@');(@)(#)recno.3
                  8.5 (Berkeley) 8/18/94

