

Linux
          manual pages
Section 3
 

 
 

Name
uuid_generate, uuid_generate_random, uuid_generate_time
      — create a new unique UUID value

Synopsis

#include <uuid/uuid.h>

void
            uuid_generate(
uuid_t out);

           
        

void
            uuid_generate_random(
uuid_t out);

           
        

void
            uuid_generate_time(
uuid_t out);

           
        

 
DESCRIPTION
The uuid_generate function
      creates a new universally unique identifier (UUID). The uuid
      will be generated based on high-quality randomness from
      /dev/urandom, if available. If
      it is not available, then uuid_generate will use an alternative
      algorithm which uses the current time, the local ethernet MAC
      address (if available), and random data generated using a
      pseudo-random generator.
The uuid_generate_random
      function forces the use of the all-random UUID format, even
      if a high-quality random number generator (i.e., /dev/urandom) is not available, in which
      case a pseudo-random generator will be subsituted. Note that
      the use of a pseudo-random generator may compromise the
      uniqueness of UUIDs generated in this fashion.
The uuid_generate_time
      function forces the use of the alternative algorithm which
      uses the current time and the local ethernet MAC address (if
      available). This algorithm used to be the default one used to
      generate UUID, but because of the use of the ethernet MAC
      address, it can leak information about when and where the
      UUID was generated. This can cause privacy problems in some
      applications, so the uuid_generate function only uses this
      algorithm if a high-quality source of randomness is not
      available.
The UUID is 16 bytes (128 bits) long, which gives
      approximately 3.4x10^38 unique values (there are
      approximately 10^80 elemntary particles in the universe
      according to Carl Sagan's Cosmos). The new UUID can reasonably be
      considered unique among all UUIDs created on the local
      system, and among UUIDs created on other systems in the past
      and in the future.

 
RETURN VALUE
The newly created UUID is returned in the memory location
      pointed to by out.

 
CONFORMING TO
OSF DCE 1.1

 
AUTHOR
Theodore Y. Ts'o

 
AVAILABILITY
libuuid is part of the
      util-linux package since version 2.15.1 and is available from
      ftp://ftp.kernel.org/pub/linux/utils/util-linux/.

 
SEE ALSO
uuid(3), uuidgen(1), uuid_clear(3), uuid_compare(3), uuid_copy(3), uuid_is_null(3), uuid_parse(3), uuid_time(3), uuid_unparse(3)

                    Copyright 1999 Andreas Dilger (adilgerdocument.write('@');(@)enel.ucalgary.ca)

                  %Begin-Header%
                  Redistribution and use in source and binary forms, with or without

                  modification, are permitted provided that the following conditions

                  are met:
                  1. Redistributions of source code must retain the above copyright

                     notice, and the entire permission notice in its entirety,

                     including the disclaimer of warranties.

                  2. Redistributions in binary form must reproduce the above copyright

                     notice, this list of conditions and the following disclaimer in the

                     documentation and/or other materials provided with the distribution.

                  3. The name of the author may not be used to endorse or promote

                     products derived from this software without specific prior

                     written permission.

                  THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESS OR IMPLIED

                  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES

                  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE, ALL OF

                  WHICH ARE HEREBY DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR BE

                  LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR

                  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT

                  OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR

                  BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF

                  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT

                  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE

                  USE OF THIS SOFTWARE, EVEN IF NOT ADVISED OF THE POSSIBILITY OF SUCH

                  DAMAGE.
                  %End-Header%

                  Created  Wed Mar 10 17:42:12 1999, Andreas Dilger

