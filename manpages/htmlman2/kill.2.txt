

Linux
          manual pages
Section 2
 

 
 

Name
kill — send signal to a process

Synopsis

#include <sys/types.h>
#include <signal.h>

int
            kill(
pid_t pid,

 
int sig);

           
        

Note

Feature Test Macro Requirements
                      for glibc (see feature_test_macros(7)):

kill():

_POSIX_C_SOURCE
                      >= 1 || _XOPEN_SOURCE ||
                      _POSIX_SOURCE

 
DESCRIPTION
The kill() system call can
      be used to send any signal to any process group or
      process.
If pid is
      positive, then signal sig is sent to the process with
      the ID specified by pid.
If pid equals 0,
      then sig is sent to
      every process in the process group of the calling
      process.
If pid equals
      −1, then sig is
      sent to every process for which the calling process has
      permission to send signals, except for process 1 (init), but see below.
If pid is less
      than −1, then sig is sent to every process in
      the process group whose ID is −pid.
If sig is 0, then
      no signal is sent, but error checking is still performed;
      this can be used to check for the existence of a process ID
      or process group ID.
For a process to have permission to send a signal it must
      either be privileged (under Linux: have the CAP_KILL capability), or the real or
      effective user ID of the sending process must equal the real
      or saved set-user-ID of the target process. In the case of
      SIGCONT it suffices when the
      sending and receiving processes belong to the same
      session.

 
RETURN VALUE
On success (at least one signal was sent), zero is
      returned. On error, −1 is returned, and errno is set appropriately.

 
ERRORS

EINVAL

An invalid signal was specified.

EPERM

The process does not have permission to send the
            signal to any of the target processes.

ESRCH

The pid or process group does not exist. Note that
            an existing process might be a zombie, a process which
            already committed termination, but has not yet been
            wait(2)ed for.

 
CONFORMING TO
SVr4, 4.3BSD, POSIX.1-2001.

 
NOTES
The only signals that can be sent to process ID 1, the
      init process, are
      those for which init has explicitly installed
      signal handlers. This is done to assure the system is not
      brought down accidentally.
POSIX.1-2001 requires that kill(−1,sig) send
      sig to all processes
      that the calling process may send signals to, except possibly
      for some implementation-defined system processes. Linux
      allows a process to signal itself, but on Linux the call
      kill(−1,sig)
      does not signal the calling process.
POSIX.1-2001 requires that if a process sends a signal to
      itself, and the sending thread does not have the signal
      blocked, and no other thread has it unblocked or is waiting
      for it in sigwait(3), at least one
      unblocked signal must be delivered to the sending thread
      before the kill() returns.

 
Linux Notes
Across different kernel versions, Linux has enforced
        different rules for the permissions required for an
        unprivileged process to send a signal to another process.
        In kernels 1.0 to 1.2.2, a signal could be sent if the
        effective user ID of the sender matched that of the
        receiver, or the real user ID of the sender matched that of
        the receiver. From kernel 1.2.3 until 1.3.77, a signal
        could be sent if the effective user ID of the sender
        matched either the real or effective user ID of the
        receiver. The current rules, which conform to POSIX.1-2001,
        were adopted in kernel 1.3.78.

 
BUGS
In 2.6 kernels up to and including 2.6.7, there was a bug
      that meant that when sending signals to a process group,
      kill() failed with the error
      EPERM if the caller did have
      permission to send the signal to any (rather than all) of the members of the
      process group. Notwithstanding this error return, the signal
      was still delivered to all of the processes for which the
      caller had permission to signal.

 
SEE ALSO
_exit(2), killpg(2), signal(2), tkill(2), exit(3), sigqueue(3), capabilities(7), credentials(7), signal(7)

 
COLOPHON
This page is part of release 3.34 of the Linux man-pages project. A
      description of the project, and information about reporting
      bugs, can be found at http://man7.org/linux/man-pages/.

                  Copyright (c) 1992 Drew Eckhardt (drewdocument.write('@');(@)cs.colorado.edu), March 28, 1992

                  Permission is granted to make and distribute verbatim copies of this

                  manual provided the copyright notice and this permission notice are

                  preserved on all copies.

                  Permission is granted to copy and distribute modified versions of this

                  manual under the conditions for verbatim copying, provided that the

                  entire resulting derived work is distributed under the terms of a

                  permission notice identical to this one.

                  Since the Linux kernel and libraries are constantly changing, this

                  manual page may be incorrect or out-of-date.  The author(s) assume no

                  responsibility for errors or omissions, or for damages resulting from

                  the use of the information contained herein.  The author(s) may not

                  have taken the same level of care in the production of this manual,

                  which is licensed free of charge, as they might when working

                  professionally.

                  Formatted or processed versions of this manual, if unaccompanied by

                  the source, must acknowledge the copyright and authors of this work.

                  Modified by Michael Haardt <michaeldocument.write('@');(@)moria.de>

                  Modified by Thomas Koenig <ig25document.write('@');(@)rz.uni-karlsruhe.de>

                  Modified 1993-07-23 by Rik Faith <faithdocument.write('@');(@)cs.unc.edu>

                  Modified 1993-07-25 by Rik Faith <faithdocument.write('@');(@)cs.unc.edu>

                  Modified 1995-11-01 by Michael Haardt

                   <michaeldocument.write('@');(@)cantor.informatik.rwth-aachen.de>

                  Modified 1996-04-14 by Andries Brouwer <aebdocument.write('@');(@)cwi.nl>

                   [added some polishing contributed by Mike Battersby <mibdocument.write('@');(@)deakin.edu.au>]

                  Modified 1996-07-21 by Andries Brouwer <aebdocument.write('@');(@)cwi.nl>

                  Modified 1997-01-17 by Andries Brouwer <aebdocument.write('@');(@)cwi.nl>

                  Modified 2001-12-18 by Andries Brouwer <aebdocument.write('@');(@)cwi.nl>

                  Modified 2002-07-24 by Michael Kerrisk <mtk.manpagesdocument.write('@');(@)gmail.com>

                  Added note on historical rules enforced when an unprivileged process

                  sends a signal.
                  Modified 2004-06-16 by Michael Kerrisk <mtk.manpagesdocument.write('@');(@)gmail.com>

                      Added note on CAP_KILL

                  Modified 2004-06-24 by aeb
                  Modified, 2004-11-30, after idea from emmanuel.colbusdocument.write('@');(@)ensimag.imag.fr

