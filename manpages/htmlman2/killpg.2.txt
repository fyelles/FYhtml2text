

Linux
          manual pages
Section 2
 

 
 

Name
killpg — send signal to a process group

Synopsis

#include <signal.h>

int
            killpg(
int pgrp,

 
int sig);

           
        

Note

Feature Test Macro Requirements
                      for glibc (see feature_test_macros(7)):

killpg():

_BSD_SOURCE ||
                      _XOPEN_SOURCE
                      >= 500 || _XOPEN_SOURCE &&
                      _XOPEN_SOURCE_EXTENDED

 
DESCRIPTION
killpg() sends the signal
      sig to the process
      group pgrp. See
      signal(7) for a list of
      signals.
If pgrp is 0,
      killpg() sends the signal to
      the calling process's process group. (POSIX says: If
      pgrp is less than or
      equal to 1, the behavior is undefined.)
For a process to have permission to send a signal it must
      either be privileged (under Linux: have the CAP_KILL capability), or the real or
      effective user ID of the sending process must equal the real
      or saved set-user-ID of the target process. In the case of
      SIGCONT it suffices when the
      sending and receiving processes belong to the same
      session.

 
RETURN VALUE
On success, zero is returned. On error, −1 is
      returned, and errno is set
      appropriately.

 
ERRORS

EINVAL

Sig is not a
            valid signal number.

EPERM

The process does not have permission to send the
            signal to any of the target processes.

ESRCH

No process can be found in the process group
            specified by pgrp.

ESRCH

The process group was given as 0 but the sending
            process does not have a process group.

 
CONFORMING TO
SVr4, 4.4BSD (the killpg()
      function call first appeared in 4BSD), POSIX.1-2001.

 
NOTES
There are various differences between the permission
      checking in BSD-type systems and System V-type systems. See
      the POSIX rationale for kill().
      A difference not mentioned by POSIX concerns the return value
      EPERM: BSD documents that no
      signal is sent and EPERM
      returned when the permission check failed for at least one
      target process, while POSIX documents EPERM only when the permission check
      failed for all target processes.
On Linux, killpg() is
      implemented as a library function that makes the call
      kill(-pgrp, sig).

 
SEE ALSO
getpgrp(2), kill(2), signal(2), capabilities(7), credentials(7)

 
COLOPHON
This page is part of release 3.33 of the Linux man-pages project. A
      description of the project, and information about reporting
      bugs, can be found at http://man7.org/linux/man-pages/.

                    Copyright (c) 1980, 1991 Regents of the University of California.

                  All rights reserved.

                  Redistribution and use in source and binary forms, with or without

                  modification, are permitted provided that the following conditions

                  are met:
                  1. Redistributions of source code must retain the above copyright

                     notice, this list of conditions and the following disclaimer.

                  2. Redistributions in binary form must reproduce the above copyright

                     notice, this list of conditions and the following disclaimer in the

                     documentation and/or other materials provided with the distribution.

                  3. All advertising materials mentioning features or use of this software

                     must display the following acknowledgement:

                  This product includes software developed by the University of

                  California, Berkeley and its contributors.

                  4. Neither the name of the University nor the names of its contributors

                     may be used to endorse or promote products derived from this software

                     without specific prior written permission.

                  THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND

                  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE

                  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE

                  ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE

                  FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL

                  DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS

                  OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)

                  HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT

                  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY

                  OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF

                  SUCH DAMAGE.

                      document.write('@');(@)(#)killpg.2
                  6.5 (Berkeley) 3/10/91

                  Modified Fri Jul 23 21:55:01 1993 by Rik Faith <faithdocument.write('@');(@)cs.unc.edu>

                  Modified Tue Oct 22 08:11:14 EDT 1996 by Eric S. Raymond <esrdocument.write('@');(@)thyrsus.com>

                  Modified 2004-06-16 by Michael Kerrisk <mtk.manpagesdocument.write('@');(@)gmail.com>

                      Added notes on CAP_KILL

                  Modified 2004-06-21 by aeb

