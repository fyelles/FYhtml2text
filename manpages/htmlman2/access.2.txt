

Linux
          manual pages
Section 2
 

 
 

Name
access — check real user's permissions for a
      file

Synopsis

#include <unistd.h>

int
            access(
const char *pathname,

 
int mode);

           
        

 
DESCRIPTION
access() checks whether the
      calling process can access the file pathname. If pathname is a symbolic link, it
      is dereferenced.
The mode specifies
      the accessibility check(s) to be performed, and is either the
      value F_OK, or a mask
      consisting of the bitwise OR of one or more of R_OK, W_OK,
      and X_OK. F_OK tests for the existence of the file.
      R_OK, W_OK, and X_OK test whether the file exists and
      grants read, write, and execute permissions,
      respectively.
The check is done using the calling process's real UID and GID, rather than
      the effective IDs as is done when actually attempting an
      operation (e.g., open(2)) on the file. This
      allows set-user-ID programs to easily determine the invoking
      user's authority.
If the calling process is privileged (i.e., its real UID
      is zero), then an X_OK check is
      successful for a regular file if execute permission is
      enabled for any of the file owner, group, or other.

 
RETURN VALUE
On success (all requested permissions granted), zero is
      returned. On error (at least one bit in mode asked for a permission
      that is denied, or some other error occurred), −1 is
      returned, and errno is set
      appropriately.

 
ERRORS
access() shall fail if:

EACCES

The requested access would be denied to the file, or
            search permission is denied for one of the directories
            in the path prefix of pathname. (See also
            path_resolution(7).)

ELOOP

Too many symbolic links were encountered in
            resolving pathname.

ENAMETOOLONG

pathname is
            too long.

ENOENT

A component of pathname does not exist
            or is a dangling symbolic link.

ENOTDIR

A component used as a directory in pathname is not, in fact,
            a directory.

EROFS

Write permission was requested for a file on a
            read-only file system.

access() may fail if:

EFAULT

pathname
            points outside your accessible address space.

EINVAL

mode was
            incorrectly specified.

EIO

An I/O error occurred.

ENOMEM

Insufficient kernel memory was available.

ETXTBSY

Write access was requested to an executable which is
            being executed.

 
CONFORMING TO
SVr4, 4.3BSD, POSIX.1-2001.

 
NOTES

Warning

Using access() to
              check if a user is authorized to, for example, open a
              file before actually doing so using open(2) creates a
              security hole, because the user might exploit the
              short time interval between checking and opening the
              file to manipulate it. For
              this reason, the use of this system call should be
              avoided. (In the example just described,
              a safer alternative would be to temporarily switch
              the process's effective user ID to the real ID and
              then call open(2).)

access() always dereferences
      symbolic links. If you need to check the permissions on a
      symbolic link, use faccessat(2) with the flag
      AT_SYMLINK_NOFOLLOW.
access() returns an error if
      any of the access types in mode is denied, even if some of
      the other access types in mode are permitted.
If the calling process has appropriate privileges (i.e.,
      is superuser), POSIX.1-2001 permits an implementation to
      indicate success for an X_OK
      check even if none of the execute file permission bits are
      set. Linux does not do this.
A file is only accessible if the permissions on each of
      the directories in the path prefix of pathname grant search (i.e.,
      execute) access. If any directory is inaccessible, then the
      access() call will fail,
      regardless of the permissions on the file itself.
Only access bits are checked, not the file type or
      contents. Therefore, if a directory is found to be writable,
      it probably means that files can be created in the directory,
      and not that the directory can be written as a file.
      Similarly, a DOS file may be found to be "executable," but
      the execve(2) call will still
      fail.
access() may not work
      correctly on NFS file systems with UID mapping enabled,
      because UID mapping is done on the server and hidden from the
      client, which checks permissions.

 
BUGS
In kernel 2.4 (and earlier) there is some strangeness in
      the handling of X_OK tests for
      superuser. If all categories of execute permission are
      disabled for a nondirectory file, then the only access() test that returns −1 is when
      mode is specified as
      just X_OK; if R_OK or W_OK
      is also specified in mode, then access() returns 0 for such files. Early
      2.6 kernels (up to and including 2.6.3) also behaved in the
      same way as kernel 2.4.
In kernels before 2.6.20, access() ignored the effect of the
      MS_NOEXEC flag if it was used
      to mount(2) the underlying
      file system. Since kernel 2.6.20, access() honors this flag.

 
SEE ALSO
chmod(2), chown(2), faccessat(2), open(2), setgid(2), setuid(2), stat(2), euidaccess(3), credentials(7), path_resolution(7)

 
COLOPHON
This page is part of release 3.33 of the Linux man-pages project. A
      description of the project, and information about reporting
      bugs, can be found at http://man7.org/linux/man-pages/.

                  This manpage is Copyright (C) 1992 Drew Eckhardt;

                                                1993 Michael Haardt, Ian Jackson.

                  and Copyright (C) 2007 Michael Kerrisk <mtk.manpagesdocument.write('@');(@)gmail.com>

                  Permission is granted to make and distribute verbatim copies of this

                  manual provided the copyright notice and this permission notice are

                  preserved on all copies.

                  Permission is granted to copy and distribute modified versions of this

                  manual under the conditions for verbatim copying, provided that the

                  entire resulting derived work is distributed under the terms of a

                  permission notice identical to this one.

                  Since the Linux kernel and libraries are constantly changing, this

                  manual page may be incorrect or out-of-date.  The author(s) assume no

                  responsibility for errors or omissions, or for damages resulting from

                  the use of the information contained herein.  The author(s) may not

                  have taken the same level of care in the production of this manual,

                  which is licensed free of charge, as they might when working

                  professionally.

                  Formatted or processed versions of this manual, if unaccompanied by

                  the source, must acknowledge the copyright and authors of this work.

                  Modified 1993-07-21 Rik Faith (faithdocument.write('@');(@)cs.unc.edu)

                  Modified 1994-08-21 by Michael Chastain (mecdocument.write('@');(@)shell.portal.com):

                    Removed note about old kernel (pre-1.1.44) using wrong id on path.

                  Modified 1996-03-18 by Martin Schulze (joeydocument.write('@');(@)infodrom.north.de):

                    Stated more clearly how it behaves with symbolic links.

                  Added correction due to Nick Duffek (nsddocument.write('@');(@)bbc.com), aeb, 960426

                  Modified 1996-09-07 by Michael Haardt:

                    Restrictions for NFS
                  Modified 1997-09-09 by Joseph S. Myers <jsm28document.write('@');(@)cam.ac.uk>

                  Modified 1998-01-13 by Michael Haardt:

                    Using access is often insecure

                  Modified 2001-10-16 by aeb
                  Modified 2002-04-23 by Roger Luethi <rldocument.write('@');(@)hellgate.ch>

                  Modified 2004-06-23 by Michael Kerrisk

                  2007-06-10, mtk, various parts rewritten, and added BUGS section.

