

Linux
          manual pages
Section 2
 

 
 

Name
migrate_pages — move all pages in a process to
      another set of nodes

Synopsis

#include <numaif.h>

long
            migrate_pages(
int pid,

 
unsigned long maxnode,

 
const unsigned long *old_nodes,

 
const unsigned long *new_nodes);

           
        

Note

Link with −lnuma.

 
DESCRIPTION
migrate_pages() moves all
      pages of the process pid that are in memory nodes
      old_nodes to the
      memory nodes in new_nodes. Pages not located in
      any node in old_nodes
      will not be migrated. As far as possible, the kernel
      maintains the relative topology relationship inside
      old_nodes during the
      migration to new_nodes.
The old_nodes and
      new_nodes arguments
      are pointers to bit masks of node numbers, with up to
      maxnode bits in each
      mask. These masks are maintained as arrays of unsigned
      long integers (in the last
      long integer, the bits beyond those
      specified by maxnode
      are ignored). The maxnode argument is the maximum
      node number in the bit mask plus one (this is the same as in
      mbind(2), but different
      from select(2)).
The pid argument
      is the ID of the process whose pages are to be moved. To move
      pages in another process, the caller must be privileged
      (CAP_SYS_NICE) or the real or
      effective user ID of the calling process must match the real
      or saved-set user ID of the target process. If pid is 0, then migrate_pages() moves pages of the calling
      process.
Pages shared with another process will only be moved if
      the initiating process has the CAP_SYS_NICE privilege.

 
RETURN VALUE
On success migrate_pages()
      returns zero. On error, it returns −1, and sets
      errno to indicate the error.

 
ERRORS

EPERM

Insufficient privilege (CAP_SYS_NICE) to move pages of the
            process specified by pid, or insufficient
            privilege (CAP_SYS_NICE)
            to access the specified target nodes.

ESRCH

No process matching pid could be found.

 
VERSIONS
The migrate_pages() system
      call first appeared on Linux in version 2.6.16.

 
CONFORMING TO
This system call is Linux-specific.

 
NOTES
For information on library support, see numa(7).
Use get_mempolicy(2) with the
      MPOL_F_MEMS_ALLOWED flag to
      obtain the set of nodes that are allowed by the calling
      process's cpuset. Note that this information is subject to
      change at any time by manual or automatic reconfiguration of
      the cpuset.
Use of migrate_pages() may
      result in pages whose location (node) violates the memory
      policy established for the specified addresses (see mbind(2)) and/or the
      specified process (see set_mempolicy(2)). That is,
      memory policy does not constrain the destination nodes used
      by migrate_pages().
The <numaif.h>
      header is not included with glibc, but requires installing
      libnuma-devel or a
      similar package.

 
SEE ALSO
get_mempolicy(2), mbind(2), set_mempolicy(2),
      numa(3), numa_maps(5), cpuset(7), numa(7), migratepages(8), numa_stat(8);
the kernel source file Documentation/vm/page_migration.

 
COLOPHON
This page is part of release 3.33 of the Linux man-pages project. A
      description of the project, and information about reporting
      bugs, can be found at http://man7.org/linux/man-pages/.

                  Copyright 2009 Intel Corporation

                                 Author: Andi Kleen

                  Based on the move_pages manpage which was

                  This manpage is Copyright (C) 2006 Silicon Graphics, Inc.

                                                Christoph Lameter

                  Permission is granted to make and distribute verbatim copies of this

                  manual provided the copyright notice and this permission notice are

                  preserved on all copies.

                  Permission is granted to copy and distribute modified versions of this

                  manual under the conditions for verbatim copying, provided that the

                  entire resulting derived work is distributed under the terms of a

                  permission notice identical to this one.

