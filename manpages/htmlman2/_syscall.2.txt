

Linux
          manual pages
Section 2
 

 
 

Name
_syscall — invoking a system call without library
      support (OBSOLETE)

Synopsis

#include <linux/unistd.h>

A _syscall macro

desired system call
  

 
DESCRIPTION
The important thing to know about a system call is its
      prototype. You need to know how many arguments, their types,
      and the function return type. There are seven macros that
      make the actual call into the system easier. They have the
      form:

_syscallX(type,name,type1,arg1,type2,arg2,...)

where

X is 0–6, which
            are the number of arguments taken by the system
            call

type is
            the return type of the system call

name is
            the name of the system call

typeN is
            the Nth argument's type

argN is
            the name of the Nth argument

These macros create a function called name with the arguments you
      specify. Once you include the _syscall() in your source file,
      you call the system call by name.

 
FILES
/usr/include/linux/unistd.h

 
CONFORMING TO
The use of these macros is Linux-specific, and
      deprecated.

 
NOTES
Starting around kernel 2.6.18, the _syscall macros were
      removed from header files supplied to user space. Use
      syscall(2) instead. (Some
      architectures, notably ia64, never provided the _syscall
      macros; on those architectures, syscall(2) was always
      required.)
The _syscall() macros do
      not produce a prototype. You may have to create
      one, especially for C++ users.
System calls are not required to return only positive or
      negative error codes. You need to read the source to be sure
      how it will return errors. Usually, it is the negative of a
      standard error code, for example, −EPERM. The _syscall() macros will return
      the result r of the
      system call when r
      is nonnegative, but will return −1 and set the variable
      errno to −r when r is negative. For the error
      codes, see errno(3).
When defining a system call, the argument types must be passed by-value or
      by-pointer (for aggregates like structs).

 
EXAMPLE

#include <stdio.h>
#include <stdlib.h>
#include <errno.h>
#include <linux/unistd.h>       /* for _syscallX macros/related stuff */
#include <linux/kernel.h>       /* for struct sysinfo */

_syscall1(int, sysinfo, struct sysinfo *, info);

/* Note: if you copy directly from the nroff source, remember to
REMOVE the extra backslashes in the printf statement. */

int
main(void)
{
    struct sysinfo s_info;
    int error;

    error = sysinfo(&s_info);
    printf("code error = %d\n", error);
    printf("Uptime = %lds\nLoad: 1 min %lu / 5 min %lu / 15 min %lu\n"
           "RAM: total %lu / free %lu / shared %lu\n"
           "Memory in buffers = %lu\nSwap: total %lu / free %lu\n"
           "Number of processes = %d\n",
           s_info.uptime, s_info.loads[0],
           s_info.loads[1], s_info.loads[2],
           s_info.totalram, s_info.freeram,
           s_info.sharedram, s_info.bufferram,
           s_info.totalswap, s_info.freeswap,
           s_info.procs);
    exit(EXIT_SUCCESS);
}

 
Sample Output

code error = 0
uptime = 502034s
Load: 1 min 13376 / 5 min 5504 / 15 min 1152
RAM: total 15343616 / free 827392 / shared 8237056
Memory in buffers = 5066752
Swap: total 27881472 / free 24698880
Number of processes = 40

 
SEE ALSO
intro(2), syscall(2), errno(3)

 
COLOPHON
This page is part of release 3.33 of the Linux man-pages project. A
      description of the project, and information about reporting
      bugs, can be found at http://man7.org/linux/man-pages/.

                  Copyright (c) 1993 Michael Haardt (michaeldocument.write('@');(@)moria.de),

                    Fri Apr  2 11:32:09 MET DST 1993

                  This is free documentation; you can redistribute it and/or

                  modify it under the terms of the GNU General Public License as

                  published by the Free Software Foundation; either version 2 of

                  the License, or (at your option) any later version.

                  The GNU General Public License's references to "object code"

                  and "executables" are to be interpreted as the output of any

                  document formatting or typesetting system, including

                  intermediate and printed output.

                  This manual is distributed in the hope that it will be useful,

                  but WITHOUT ANY WARRANTY; without even the implied warranty of

                  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the

                  GNU General Public License for more details.

                  You should have received a copy of the GNU General Public

                  License along with this manual; if not, write to the Free

                  Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111,

                  USA.

                  Tue Jul  6 12:42:46 MDT 1993 <dminerdocument.write('@');(@)nyx.cs.du.edu>

                  Added "Calling Directly" and supporting paragraphs

                  Modified Sat Jul 24 15:19:12 1993 by Rik Faith <faithdocument.write('@');(@)cs.unc.edu>

                  Modified 21 Aug 1994 by Michael Chastain <mecdocument.write('@');(@)shell.portal.com>:

                    Added explanation of arg stacking when 6 or more args.

                  Modified 10 June 1995 by Andries Brouwer <aebdocument.write('@');(@)cwi.nl>

                  2007-10-23 mtk: created as a new page, by taking the content

                  specific to the _syscall() macros from intro(2).

