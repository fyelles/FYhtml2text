

Linux
          manual pages
Section 2
 

 
 

Name
modify_ldt — get or set ldt

Synopsis

#include <sys/types.h>

int
            modify_ldt(
int func,

 
void *ptr,

 
unsigned long bytecount);

           
        

 
DESCRIPTION
modify_ldt() reads or writes
      the local descriptor table (ldt) for a process. The ldt is a
      per-process memory management table used by the i386
      processor. For more information on this table, see an Intel
      386 processor handbook.
When func is 0,
      modify_ldt() reads the ldt into
      the memory pointed to by ptr. The number of bytes read
      is the smaller of bytecount and the actual size
      of the ldt.
When func is 1,
      modify_ldt() modifies one ldt
      entry. ptr points to
      a user_desc
      structure and bytecount must equal the size
      of this structure.
The user_desc
      structure is defined in <asm/ldt.h>
      as:

                  struct
user_desc {

 
unsigned int

                   
entry_number;
 

 
unsigned long

                   
base_addr;
 

 
unsigned int

                   
limit;
 

 
unsigned int

                   
seg_32bit:1;
 

 
unsigned int

                   
contents:2;
 

 
unsigned int

                   
read_exec_only:1;
 

 
unsigned int

                   
limit_in_pages:1;
 

 
unsigned int

                   
seg_not_present:1;
 

 
unsigned int

                   
useable:1;
 

};

In Linux 2.4 and earlier, this structure was named
      modify_ldt_ldt_s.

 
RETURN VALUE
On success, modify_ldt()
      returns either the actual number of bytes read (for reading)
      or 0 (for writing). On failure, modify_ldt() returns −1 and sets
      errno to indicate the error.

 
ERRORS

EFAULT

ptr points
            outside the address space.

EINVAL

ptr is 0, or
            func is 1 and
            bytecount is
            not equal to the size of the structure modify_ldt_ldt_s, or
            func is 1 and
            the new ldt entry has invalid values.

ENOSYS

func is
            neither 0 nor 1.

 
CONFORMING TO
This call is Linux-specific and should not be used in
      programs intended to be portable.

 
NOTES
Glibc does not provide a wrapper for this system call;
      call it using syscall(2).

 
SEE ALSO
vm86(2)

 
COLOPHON
This page is part of release 3.33 of the Linux man-pages project. A
      description of the project, and information about reporting
      bugs, can be found at http://man7.org/linux/man-pages/.

                  Copyright (c) 1995 Michael Chastain (mecdocument.write('@');(@)duracef.shout.net), 22 July 1995.

                  This is free documentation; you can redistribute it and/or

                  modify it under the terms of the GNU General Public License as

                  published by the Free Software Foundation; either version 2 of

                  the License, or (at your option) any later version.

                  The GNU General Public License's references to "object code"

                  and "executables" are to be interpreted as the output of any

                  document formatting or typesetting system, including

                  intermediate and printed output.

                  This manual is distributed in the hope that it will be useful,

                  but WITHOUT ANY WARRANTY; without even the implied warranty of

                  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the

                  GNU General Public License for more details.

                  You should have received a copy of the GNU General Public

                  License along with this manual; if not, write to the Free

                  Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111,

                  USA.

