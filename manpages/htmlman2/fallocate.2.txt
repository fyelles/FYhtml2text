

Linux
          manual pages
Section 2
 

 
 

Name
fallocate — manipulate file space

Synopsis

#define _GNU_SOURCE              /* See feature_test_macros(7) */
#include <fcntl.h>

int
            fallocate(
int fd,

 
int mode,

 
off_t offset,

 
off_t len);

           
        

 
DESCRIPTION
This is a nonportable, Linux-specific system call. For the
      portable, POSIX.1-specified method of ensuring that space is
      allocated for a file, see posix_fallocate(3).
fallocate() allows the
      caller to directly manipulate the allocated disk space for
      the file referred to by fd for the byte range starting
      at offset and
      continuing for len
      bytes.
The mode argument
      determines the operation to be performed on the given range.
      Currently only one flag is supported for mode:

FALLOC_FL_KEEP_SIZE

This flag allocates and initializes to zero the disk
            space within the range specified by offset and len. After a successful
            call, subsequent writes into this range are guaranteed
            not to fail because of lack of disk space.
            Preallocating zeroed blocks beyond the end of the file
            is useful for optimizing append workloads.
            Preallocating blocks does not change the file size (as
            reported by stat(2)) even if it
            is less than offset+len.

If FALLOC_FL_KEEP_SIZE flag
      is not specified in mode, the default behavior is
      almost same as when this flag is specified. The only
      difference is that on success, the file size will be changed
      if offset + len is
      greater than the file size. This default behavior closely
      resembles the behavior of the posix_fallocate(3) library
      function, and is intended as a method of optimally
      implementing that function.
Because allocation is done in block size chunks,
      fallocate() may allocate a
      larger range than that which was specified.

 
RETURN VALUE
fallocate() returns zero on
      success, and −1 on failure.

 
ERRORS

EBADF

fd is not a
            valid file descriptor, or is not opened for
            writing.

EFBIG

offset+len exceeds the maximum
            file size.

EINTR

A signal was caught during execution.

EINVAL

offset was
            less than 0, or len was less than or
            equal to 0.

EIO

An I/O error occurred while reading from or writing
            to a file system.

ENODEV

fd does not
            refer to a regular file or a directory. (If fd is a pipe or FIFO, a
            different error results.)

ENOSPC

There is not enough space left on the device
            containing the file referred to by fd.

ENOSYS

The file system containing the file referred to by
            fd does not
            support this operation.

EOPNOTSUPP

The mode is
            not supported by the file system containing the file
            referred to by fd.

EPERM

The file referred to by fd is marked immutable
            (see chattr(1)).

ESPIPE

fd refers to
            a pipe or FIFO.

 
VERSIONS
fallocate() is available on
      Linux since kernel 2.6.23. Support is provided by glibc since
      version 2.10.

 
CONFORMING TO
fallocate() is
      Linux-specific.

 
SEE ALSO
ftruncate(2), posix_fadvise(3), posix_fallocate(3)

 
COLOPHON
This page is part of release 3.34 of the Linux man-pages project. A
      description of the project, and information about reporting
      bugs, can be found at http://man7.org/linux/man-pages/.

                    Copyright (c) 2007 Silicon Graphics, Inc. All Rights Reserved

                  Written by Dave Chinner <dgcdocument.write('@');(@)sgi.com>

                  May be distributed as per GNU General Public License version 2.

                  FIXME: Linux 2.6.38 added FALLOC_FL_PUNCH_HOLE

