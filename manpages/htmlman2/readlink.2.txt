

Linux
          manual pages
Section 2
 

 
 

Name
readlink — read value of a symbolic link

Synopsis

#include <unistd.h>

ssize_t
            readlink(
const char *path,

 
char *buf,

 
size_t bufsiz);

           
        

Note

Feature Test Macro Requirements
                      for glibc (see feature_test_macros(7)):

readlink():

_BSD_SOURCE ||
                      _XOPEN_SOURCE
                      >= 500 || _XOPEN_SOURCE &&
                      _XOPEN_SOURCE_EXTENDED ||
                      _POSIX_C_SOURCE
                      >= 200112L

 
DESCRIPTION
readlink() places the
      contents of the symbolic link path in the buffer buf, which has size bufsiz. readlink() does not append a null byte to
      buf. It will truncate
      the contents (to a length of bufsiz characters), in case the
      buffer is too small to hold all of the contents.

 
RETURN VALUE
On success, readlink()
      returns the number of bytes placed in buf. On error, −1 is
      returned and errno is set to
      indicate the error.

 
ERRORS

EACCES

Search permission is denied for a component of the
            path prefix. (See also path_resolution(7).)

EFAULT

buf extends
            outside the process's allocated address space.

EINVAL

bufsiz is
            not positive.

EINVAL

The named file is not a symbolic link.

EIO

An I/O error occurred while reading from the file
            system.

ELOOP

Too many symbolic links were encountered in
            translating the pathname.

ENAMETOOLONG

A pathname, or a component of a pathname, was too
            long.

ENOENT

The named file does not exist.

ENOMEM

Insufficient kernel memory was available.

ENOTDIR

A component of the path prefix is not a
            directory.

 
CONFORMING TO
4.4BSD (readlink() first
      appeared in 4.2BSD), POSIX.1-2001.

 
NOTES
In versions of glibc up to and including glibc 2.4, the
      return type of readlink() was
      declared as int. Nowadays, the
      return type is declared as ssize_t,
      as (newly) required in POSIX.1-2001.
Using a statically sized buffer might not provide enough
      room for the symbolic link contents. The required size for
      the buffer can be obtained from the stat.st_size value returned
      by a call to lstat(2) on the link.
      However, the number of bytes written by readlink() should be checked to make sure
      that the size of the symbolic link did not increase between
      the calls. Dynamically allocating the buffer for readlink() also addresses a common
      portability problem when using PATH_MAX for the buffer size, as this
      constant is not guaranteed to be defined per POSIX if the
      system does not have such limit.

 
EXAMPLE
The following program allocates the buffer needed by
      readlink() dynamically from the
      information provided by lstat(), making sure there's no race
      condition between the calls.

#include <sys/types.h>
#include <sys/stat.h>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>

int
main(int argc, char *argv[])
{
    struct stat sb;
    char *linkname;
    ssize_t r;

    if (argc != 2) {
        fprintf(stderr, "Usage: %s <pathname>\n", argv[0]);
        exit(EXIT_FAILURE);
    }

    if (lstat(argv[1], &sb) == −1) {
        perror("lstat");
        exit(EXIT_FAILURE);
    }

    linkname = malloc(sb.st_size + 1);
    if (linkname == NULL) {
        fprintf(stderr, "insufficient memory\n");
        exit(EXIT_FAILURE);
    }

    r = readlink(argv[1], linkname, sb.st_size + 1);

    if (r < 0) {
        perror("lstat");
        exit(EXIT_FAILURE);
    }

    if (r > sb.st_size) {
        fprintf(stderr, "symlink increased in size "
                        "between lstat() and readlink()\n");
        exit(EXIT_FAILURE);
    }

    linkname[sb.st_size] = '\0';

    printf("'%s' points to '%s'\n", argv[1], linkname);

    exit(EXIT_SUCCESS);
}

 
SEE ALSO
readlink(1), lstat(2), readlinkat(2), stat(2), symlink(2), path_resolution(7),
      symlink(7)

 
COLOPHON
This page is part of release 3.35 of the Linux man-pages project. A
      description of the project, and information about reporting
      bugs, can be found at http://man7.org/linux/man-pages/.

                    Copyright (c) 1983, 1991 The Regents of the University of California.

                  And Copyright (C) 2011 Guillem Jover <guillemdocument.write('@');(@)hadrons.org>

                  All rights reserved.

                  Redistribution and use in source and binary forms, with or without

                  modification, are permitted provided that the following conditions

                  are met:
                  1. Redistributions of source code must retain the above copyright

                     notice, this list of conditions and the following disclaimer.

                  2. Redistributions in binary form must reproduce the above copyright

                     notice, this list of conditions and the following disclaimer in the

                     documentation and/or other materials provided with the distribution.

                  3. All advertising materials mentioning features or use of this software

                     must display the following acknowledgement:

                  This product includes software developed by the University of

                  California, Berkeley and its contributors.

                  4. Neither the name of the University nor the names of its contributors

                     may be used to endorse or promote products derived from this software

                     without specific prior written permission.

                  THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND

                  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE

                  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE

                  ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE

                  FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL

                  DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS

                  OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)

                  HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT

                  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY

                  OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF

                  SUCH DAMAGE.

                      document.write('@');(@)(#)readlink.2
                  6.8 (Berkeley) 3/10/91

                  Modified Sat Jul 24 00:10:21 1993 by Rik Faith (faithdocument.write('@');(@)cs.unc.edu)

                  Modified Tue Jul  9 23:55:17 1996 by aeb

                  Modified Fri Jan 24 00:26:00 1997 by aeb

                  2011-09-20, Guillem Jover <guillemdocument.write('@');(@)hadrons.org>:

                      Added text on dynamically allocating buffer + example program

