

Linux
          manual pages
Section 2
 

 
 

Name
bind — bind a name to a socket

Synopsis

#include <sys/types.h>           /* See NOTES */
#include <sys/socket.h>

int
            bind(
int sockfd,

 
const struct sockaddr *addr,

 
socklen_t addrlen);

           
        

 
DESCRIPTION
When a socket is created with socket(2), it exists in a
      name space (address family) but has no address assigned to
      it. bind() assigns the address
      specified to by addr
      to the socket referred to by the file descriptor sockfd. addrlen specifies the size, in
      bytes, of the address structure pointed to by addr. Traditionally, this
      operation is called “assigning a name to a
      socket”.
It is normally necessary to assign a local address using
      bind() before a SOCK_STREAM socket may receive connections
      (see accept(2)).
The rules used in name binding vary between address
      families. Consult the manual entries in Section 7 for
      detailed information. For AF_INET see ip(7), for AF_INET6 see ipv6(7), for AF_UNIX see unix(7), for AF_APPLETALK see ddp(7), for AF_PACKET see packet(7), for AF_X25 see x25(7) and for AF_NETLINK see netlink(7).
The actual structure passed for the addr argument will depend on
      the address family. The sockaddr structure is defined as
      something like:

                  struct
sockaddr {

 
sa_family_t

                   
sa_family;
 

 
char

                   
sa_data[14];
 

};

The only purpose of this structure is to cast the
      structure pointer passed in addr in order to avoid compiler
      warnings. See EXAMPLE below.

 
RETURN VALUE
On success, zero is returned. On error, −1 is
      returned, and errno is set
      appropriately.

 
ERRORS

EACCES

The address is protected, and the user is not the
            superuser.

EADDRINUSE

The given address is already in use.

EBADF

sockfd is
            not a valid descriptor.

EINVAL

The socket is already bound to an address.

ENOTSOCK

sockfd is a
            descriptor for a file, not a socket.

The following errors are specific to UNIX domain
      (AF_UNIX) sockets:

EACCES

Search permission is denied on a component of the
            path prefix. (See also path_resolution(7).)

EADDRNOTAVAIL

A nonexistent interface was requested or the
            requested address was not local.

EFAULT

addr points
            outside the user's accessible address space.

EINVAL

The addrlen
            is wrong, or the socket was not in the AF_UNIX family.

ELOOP

Too many symbolic links were encountered in
            resolving addr.

ENAMETOOLONG

addr is too
            long.

ENOENT

The file does not exist.

ENOMEM

Insufficient kernel memory was available.

ENOTDIR

A component of the path prefix is not a
            directory.

EROFS

The socket inode would reside on a read-only file
            system.

 
CONFORMING TO
SVr4, 4.4BSD, POSIX.1-2001 (bind() first appeared in 4.2BSD).

 
NOTES
POSIX.1-2001 does not require the inclusion of
      <sys/types.h> and this header file is not required on
      Linux. However, some historical (BSD) implementations
      required this header file, and portable applications are
      probably wise to include it.
The third argument of bind()
      is in reality an int (and this is
      what 4.x BSD and libc4 and libc5 have). Some POSIX confusion
      resulted in the present socklen_t,
      also used by glibc. See also accept(2).

 
BUGS
The transparent proxy options are not described.

 
EXAMPLE
An example of the use of bind() with Internet domain sockets can be
      found in getaddrinfo(3).
The following example shows how to bind a stream socket in
      the UNIX (AF_UNIX) domain, and
      accept connections:

#include <sys/socket.h>
#include <sys/un.h>
#include <stdlib.h>
#include <stdio.h>
#include <string.h>

#define MY_SOCK_PATH "/somepath"
#define LISTEN_BACKLOG 50

#define handle_error(msg) \
    do { perror(msg); exit(EXIT_FAILURE); } while (0)

int
main(int argc, char *argv[])
{
    int sfd, cfd;
    struct sockaddr_un my_addr, peer_addr;
    socklen_t peer_addr_size;

    sfd = socket(AF_UNIX, SOCK_STREAM, 0);
    if (sfd == −1)
        handle_error("socket");

    memset(&my_addr, 0, sizeof(struct sockaddr_un));
                        /* Clear structure */
    my_addr.sun_family = AF_UNIX;
    strncpy(my_addr.sun_path, MY_SOCK_PATH,
            sizeof(my_addr.sun_path) − 1);

    if (bind(sfd, (struct sockaddr *) &my_addr,
            sizeof(struct sockaddr_un)) == −1)
        handle_error("bind");

    if (listen(sfd, LISTEN_BACKLOG) == −1)
        handle_error("listen");

    /* Now we can accept incoming connections one
       at a time using accept(2) */

    peer_addr_size = sizeof(struct sockaddr_un);
    cfd = accept(sfd, (struct sockaddr *) &peer_addr,
                 &peer_addr_size);
    if (cfd == −1)
        handle_error("accept");

    /* Code to deal with incoming connection(s)... */

    /* When no longer required, the socket pathname, MY_SOCK_PATH
       should be deleted using unlink(2) or remove(3) */
}

 
SEE ALSO
accept(2), connect(2), getsockname(2), listen(2), socket(2), getaddrinfo(3), getifaddrs(3), ip(7), ipv6(7), path_resolution(7),
      socket(7), unix(7)

 
COLOPHON
This page is part of release 3.33 of the Linux man-pages project. A
      description of the project, and information about reporting
      bugs, can be found at http://man7.org/linux/man-pages/.

                  Copyright 1993 Rickard E. Faith (faithdocument.write('@');(@)cs.unc.edu)

                  Portions extracted from /usr/include/sys/socket.h, which does not have

                  any authorship information in it.  It is probably available under the GPL.

                  Permission is granted to make and distribute verbatim copies of this

                  manual provided the copyright notice and this permission notice are

                  preserved on all copies.

                  Permission is granted to copy and distribute modified versions of this

                  manual under the conditions for verbatim copying, provided that the

                  entire resulting derived work is distributed under the terms of a

                  permission notice identical to this one.

                  Since the Linux kernel and libraries are constantly changing, this

                  manual page may be incorrect or out-of-date.  The author(s) assume no

                  responsibility for errors or omissions, or for damages resulting from

                  the use of the information contained herein.  The author(s) may not

                  have taken the same level of care in the production of this manual,

                  which is licensed free of charge, as they might when working

                  professionally.

                  Formatted or processed versions of this manual, if unaccompanied by

                  the source, must acknowledge the copyright and authors of this work.

                  Other portions are from the 6.9 (Berkeley) 3/10/91 man page:

                  Copyright (c) 1983 The Regents of the University of California.

                  All rights reserved.

                  Redistribution and use in source and binary forms, with or without

                  modification, are permitted provided that the following conditions

                  are met:
                  1. Redistributions of source code must retain the above copyright

                     notice, this list of conditions and the following disclaimer.

                  2. Redistributions in binary form must reproduce the above copyright

                     notice, this list of conditions and the following disclaimer in the

                     documentation and/or other materials provided with the distribution.

                  3. All advertising materials mentioning features or use of this software

                     must display the following acknowledgement:

                      This product includes software developed by the University of

                      California, Berkeley and its contributors.

                  4. Neither the name of the University nor the names of its contributors

                     may be used to endorse or promote products derived from this software

                     without specific prior written permission.

                  THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND

                  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE

                  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE

                  ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE

                  FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL

                  DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS

                  OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)

                  HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT

                  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY

                  OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF

                  SUCH DAMAGE.

                  Modified Mon Oct 21 23:05:29 EDT 1996 by Eric S. Raymond <esrdocument.write('@');(@)thyrsus.com>

                  Modified 1998 by Andi Kleen

                  $Id: bind.2,v 1.3 1999/04/23 19:56:07 freitag Exp $

                  Modified 2004-06-23 by Michael Kerrisk <mtk.manpagesdocument.write('@');(@)gmail.com>

