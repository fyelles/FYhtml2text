

Linux
          manual pages
Section 2
 

 
 

Name
ioctl — control device

Synopsis

#include <sys/ioctl.h>

int
            ioctl(
int d,

 
int request,

 
...);

           
        

 
DESCRIPTION
The ioctl() function
      manipulates the underlying device parameters of special
      files. In particular, many operating characteristics of
      character special files (e.g., terminals) may be controlled
      with ioctl() requests. The
      argument d must be an
      open file descriptor.
The second argument is a device-dependent request code.
      The third argument is an untyped pointer to memory. It's
      traditionally char *argp (from the days before
      void * was valid C),
      and will be so named for this discussion.
An ioctl() request has encoded in it
      whether the argument is an in parameter or out parameter, and the size
      of the argument argp in bytes. Macros and
      defines used in specifying an ioctl() request are located in the file
      <sys/ioctl.h>

 
RETURN VALUE
Usually, on success zero is returned. A few ioctl() requests use the return value as an
      output parameter and return a nonnegative value on success.
      On error, −1 is returned, and errno is set appropriately.

 
ERRORS

EBADF

d is not a
            valid descriptor.

EFAULT

argp
            references an inaccessible memory area.

EINVAL

Request or
            argp is not
            valid.

ENOTTY

d is not
            associated with a character special device.

ENOTTY

The specified request does not apply to the kind of
            object that the descriptor d references.

 
CONFORMING TO
No single standard. Arguments, returns, and semantics of
      ioctl() vary according to the
      device driver in question (the call is used as a catch-all
      for operations that don't cleanly fit the UNIX stream I/O
      model). See ioctl_list(2) for a list of
      many of the known ioctl()
      calls. The ioctl() function
      call appeared in Version 7 AT&T UNIX.

 
NOTES
In order to use this call, one needs an open file
      descriptor. Often the open(2) call has unwanted
      side effects, that can be avoided under Linux by giving it
      the O_NONBLOCK flag.

 
SEE ALSO
execve(2), fcntl(2), ioctl_list(2), open(2), sd(4), tty(4)

 
COLOPHON
This page is part of release 3.33 of the Linux man-pages project. A
      description of the project, and information about reporting
      bugs, can be found at http://man7.org/linux/man-pages/.

                    Copyright (c) 1980, 1991 Regents of the University of California.

                  All rights reserved.

                  Redistribution and use in source and binary forms, with or without

                  modification, are permitted provided that the following conditions

                  are met:
                  1. Redistributions of source code must retain the above copyright

                     notice, this list of conditions and the following disclaimer.

                  2. Redistributions in binary form must reproduce the above copyright

                     notice, this list of conditions and the following disclaimer in the

                     documentation and/or other materials provided with the distribution.

                  3. All advertising materials mentioning features or use of this software

                     must display the following acknowledgement:

                  This product includes software developed by the University of

                  California, Berkeley and its contributors.

                  4. Neither the name of the University nor the names of its contributors

                     may be used to endorse or promote products derived from this software

                     without specific prior written permission.

                  THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND

                  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE

                  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE

                  ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE

                  FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL

                  DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS

                  OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)

                  HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT

                  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY

                  OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF

                  SUCH DAMAGE.

                      document.write('@');(@)(#)ioctl.2
                  6.4 (Berkeley) 3/10/91

                  Modified 1993-07-23 by Rik Faith <faithdocument.write('@');(@)cs.unc.edu>

                  Modified 1996-10-22 by Eric S. Raymond <esrdocument.write('@');(@)thyrsus.com>

                  Modified 1999-06-25 by Rachael Munns <vashtidocument.write('@');(@)dream.org.uk>

                  Modified 2000-09-21 by Andries Brouwer <aebdocument.write('@');(@)cwi.nl>

