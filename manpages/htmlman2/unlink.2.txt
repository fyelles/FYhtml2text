

Linux
          manual pages
Section 2
 

 
 

Name
unlink — delete a name and possibly the file it
      refers to

Synopsis

#include <unistd.h>

int
            unlink(
const char *pathname);

           
        

 
DESCRIPTION
unlink() deletes a name from
      the file system. If that name was the last link to a file and
      no processes have the file open the file is deleted and the
      space it was using is made available for reuse.
If the name was the last link to a file but any processes
      still have the file open the file will remain in existence
      until the last file descriptor referring to it is closed.
If the name referred to a symbolic link the link is
      removed.
If the name referred to a socket, fifo or device the name
      for it is removed but processes which have the object open
      may continue to use it.

 
RETURN VALUE
On success, zero is returned. On error, −1 is
      returned, and errno is set
      appropriately.

 
ERRORS

EACCES

Write access to the directory containing pathname is not allowed
            for the process's effective UID, or one of the
            directories in pathname did not allow
            search permission. (See also path_resolution(7).)

EBUSY

The file pathname cannot be
            unlinked because it is being used by the system or
            another process; for example, it is a mount point or
            the NFS client software created it to represent an
            active but otherwise nameless inode ("NFS silly
            renamed").

EFAULT

pathname
            points outside your accessible address space.

EIO

An I/O error occurred.

EISDIR

pathname
            refers to a directory. (This is the non-POSIX value
            returned by Linux since 2.1.132.)

ELOOP

Too many symbolic links were encountered in
            translating pathname.

ENAMETOOLONG

pathname was
            too long.

ENOENT

A component in pathname does not exist
            or is a dangling symbolic link, or pathname is empty.

ENOMEM

Insufficient kernel memory was available.

ENOTDIR

A component used as a directory in pathname is not, in fact,
            a directory.

EPERM

The system does not allow unlinking of directories,
            or unlinking of directories requires privileges that
            the calling process doesn't have. (This is the POSIX
            prescribed error return; as noted above, Linux returns
            EISDIR for this
            case.)

EPERM (Linux only)

The file system does not allow unlinking of
            files.

EPERM or EACCES

The directory containing pathname has the sticky
            bit (S_ISVTX) set and the
            process's effective UID is neither the UID of the file
            to be deleted nor that of the directory containing it,
            and the process is not privileged (Linux: does not have
            the CAP_FOWNER
            capability).

EROFS

pathname
            refers to a file on a read-only file system.

 
CONFORMING TO
SVr4, 4.3BSD, POSIX.1-2001.

 
BUGS
Infelicities in the protocol underlying NFS can cause the
      unexpected disappearance of files which are still being
      used.

 
SEE ALSO
rm(1), chmod(2), link(2), mknod(2), open(2), rename(2), rmdir(2), unlinkat(2), mkfifo(3), remove(3), path_resolution(7),
      symlink(7)

 
COLOPHON
This page is part of release 3.33 of the Linux man-pages project. A
      description of the project, and information about reporting
      bugs, can be found at http://man7.org/linux/man-pages/.

                  This manpage is Copyright (C) 1992 Drew Eckhardt;

                                                1993 Ian Jackson.

                  Permission is granted to make and distribute verbatim copies of this

                  manual provided the copyright notice and this permission notice are

                  preserved on all copies.

                  Permission is granted to copy and distribute modified versions of this

                  manual under the conditions for verbatim copying, provided that the

                  entire resulting derived work is distributed under the terms of a

                  permission notice identical to this one.

                  Since the Linux kernel and libraries are constantly changing, this

                  manual page may be incorrect or out-of-date.  The author(s) assume no

                  responsibility for errors or omissions, or for damages resulting from

                  the use of the information contained herein.  The author(s) may not

                  have taken the same level of care in the production of this manual,

                  which is licensed free of charge, as they might when working

                  professionally.

                  Formatted or processed versions of this manual, if unaccompanied by

                  the source, must acknowledge the copyright and authors of this work.

                  Modified 1993-07-24 by Rik Faith <faithdocument.write('@');(@)cs.unc.edu>

                  Modified 1996-09-08 by Arnt Gulbrandsen <agulbradocument.write('@');(@)troll.no>

                  Modified 1997-01-31 by Eric S. Raymond <esrdocument.write('@');(@)thyrsus.com>

                  Modified 2001-05-17 by aeb
                  Modified 2004-06-23 by Michael Kerrisk <mtk.manpagesdocument.write('@');(@)gmail.com>

