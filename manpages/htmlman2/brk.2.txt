

Linux
          manual pages
Section 2
 

 
 

Name
brk, sbrk — change data segment size

Synopsis

#include <unistd.h>

int
            brk(
void *addr);

           
        

void
            *sbrk(
intptr_t increment);

           
        

Note

Feature Test Macro Requirements
                      for glibc (see feature_test_macros(7)):

brk(), sbrk():

Since
                      glibc 2.12:

_BSD_SOURCE ||
                      _SVID_SOURCE ||
                      (_XOPEN_SOURCE
                      >= 500 || _XOPEN_SOURCE &&
                      _XOPEN_SOURCE_EXTENDED)
                      && !(_POSIX_C_SOURCE >=
                      200112L || _XOPEN_SOURCE >=
                      600)

Before
                      glibc 2.12:

_BSD_SOURCE ||
                      _SVID_SOURCE ||
                      _XOPEN_SOURCE
                      >= 500 || _XOPEN_SOURCE &&
                      _XOPEN_SOURCE_EXTENDED

 
DESCRIPTION
brk() and sbrk() change the location of the
      program break, which
      defines the end of the process's data segment (i.e., the
      program break is the first location after the end of the
      uninitialized data segment). Increasing the program break has
      the effect of allocating memory to the process; decreasing
      the break deallocates memory.
brk() sets the end of the
      data segment to the value specified by addr, when that value is
      reasonable, the system has enough memory, and the process
      does not exceed its maximum data size (see setrlimit(2)).
sbrk() increments the
      program's data space by increment bytes. Calling
      sbrk() with an increment of 0 can be used to
      find the current location of the program break.

 
RETURN VALUE
On success, brk() returns
      zero. On error, −1 is returned, and errno is set to ENOMEM. (But see Linux Notes below.)
On success, sbrk() returns
      the previous program break. (If the break was increased, then
      this value is a pointer to the start of the newly allocated
      memory). On error, (void *)
      −1 is returned, and errno is set to ENOMEM.

 
CONFORMING TO
4.3BSD; SUSv1, marked LEGACY in SUSv2, removed in
      POSIX.1-2001.

 
NOTES
Avoid using brk() and
      sbrk(): the malloc(3) memory allocation
      package is the portable and comfortable way of allocating
      memory.
Various systems use various types for the argument of
      sbrk(). Common are int, ssize_t,
      ptrdiff_t, intptr_t.

 
Linux Notes
The return value described above for brk() is the behavior provided by the
        glibc wrapper function for the Linux brk() system call. (On most other
        implementations, the return value from brk() is the same; this return value was
        also specified in SUSv2.) However, the actual Linux system
        call returns the new program break on success. On failure,
        the system call returns the current break. The glibc
        wrapper function does some work (i.e., checks whether the
        new break is less than addr) to provide the 0 and
        −1 return values described above.
On Linux, sbrk() is
        implemented as a library function that uses the
        brk() system call, and does
        some internal bookkeeping so that it can return the old
        break value.

 
SEE ALSO
execve(2), getrlimit(2), end(3), malloc(3)

 
COLOPHON
This page is part of release 3.33 of the Linux man-pages project. A
      description of the project, and information about reporting
      bugs, can be found at http://man7.org/linux/man-pages/.

                  Copyright (c) 1993 Michael Haardt

                  (michaeldocument.write('@');(@)moria.de),
                  Fri Apr  2 11:32:09 MET DST 1993

                  This is free documentation; you can redistribute it and/or

                  modify it under the terms of the GNU General Public License as

                  published by the Free Software Foundation; either version 2 of

                  the License, or (at your option) any later version.

                  The GNU General Public License's references to "object code"

                  and "executables" are to be interpreted as the output of any

                  document formatting or typesetting system, including

                  intermediate and printed output.

                  This manual is distributed in the hope that it will be useful,

                  but WITHOUT ANY WARRANTY; without even the implied warranty of

                  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the

                  GNU General Public License for more details.

                  You should have received a copy of the GNU General Public

                  License along with this manual; if not, write to the Free

                  Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111,

                  USA.

                  Modified Wed Jul 21 19:52:58 1993 by Rik Faith <faithdocument.write('@');(@)cs.unc.edu>

                  Modified Sun Aug 21 17:40:38 1994 by Rik Faith <faithdocument.write('@');(@)cs.unc.edu>

