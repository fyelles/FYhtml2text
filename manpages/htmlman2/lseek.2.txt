

Linux
          manual pages
Section 2
 

 
 

Name
lseek — reposition read/write file offset

Synopsis

#include <sys/types.h>
#include <unistd.h>

off_t
            lseek(
int fd,

 
off_t offset,

 
int whence);

           
        

 
DESCRIPTION
The lseek() function
      repositions the offset of the open file associated with the
      file descriptor fd to
      the argument offset
      according to the directive whence as follows:

SEEK_SET

The offset is set to offset bytes.

SEEK_CUR

The offset is set to its current location plus
            offset
            bytes.

SEEK_END

The offset is set to the size of the file plus
            offset
            bytes.

The lseek() function allows
      the file offset to be set beyond the end of the file (but
      this does not change the size of the file). If data is later
      written at this point, subsequent reads of the data in the
      gap (a "hole") return null bytes ('\0') until data is
      actually written into the gap.

 
Seeking file data and holes
Since version 3.1, Linux supports the following
        additional values for whence:

SEEK_DATA

Adjust the file offset to the next location in the
              file greater than or equal to offset containing data.
              If offset
              points to data, then the file offset is set to
              offset.

SEEK_HOLE

Adjust the file offset to the next hole in the
              file greater than or equal to offset. If offset points into the
              middle of a hole, then the file offset is set to
              offset. If
              there is no hole past offset, then the file
              offset is adjusted to the end of the file (i.e.,
              there is an implicit hole at the end of any
              file).

In both of the above cases, lseek() fails if offset points past the end of
        the file.
These operations allow applications to map holes in a
        sparsely allocated file. This can be useful for
        applications such as file backup tools, which can save
        space when creating backups and preserve holes, if they
        have a mechanism for discovering holes.
For the purposes of these operations, a hole is a
        sequence of zeros that (normally) has not been allocated in
        the underlying file storage. However, a file system is not
        obliged to report holes, so these operations are not a
        guaranteed mechanism for mapping the storage space actually
        allocated to a file. (Furthermore, a sequence of zeros that
        actually has been written to the underlying storage may not
        be reported as a hole.) In the simplest implementation, a
        file system can support the operations by making
        SEEK_HOLE always return the
        offset of the end of the file, and making SEEK_DATA always return offset (i.e., even if the
        location referred to by offset is a hole, it can be
        considered to consist of data that is a sequence of
        zeros).

 
RETURN VALUE
Upon successful completion, lseek() returns the resulting offset
      location as measured in bytes from the beginning of the file.
      On error, the value (off_t)
      −1 is returned and errno is set to indicate the error.

 
ERRORS

EBADF

fd is not an
            open file descriptor.

EINVAL

whence is
            not valid. Or: the resulting file offset would be
            negative, or beyond the end of a seekable device.

EOVERFLOW

The resulting file offset cannot be represented in
            an off_t.

ESPIPE

fd is
            associated with a pipe, socket, or FIFO.

ENXIO

whence is
            SEEK_DATA or SEEK_HOLE, and the current file
            offset is beyond the end of the file.

 
CONFORMING TO
SVr4, 4.3BSD, POSIX.1-2001.
SEEK_DATA and SEEK_HOLE are nonstandard extensions also
      present in Solaris, FreeBSD, and DragonFly BSD; they are
      proposed for inclusion in the next POSIX revision (Issue
      8).

 
NOTES
Some devices are incapable of seeking and POSIX does not
      specify which devices must support lseek().
On Linux, using lseek() on a
      tty device returns ESPIPE.
When converting old code, substitute values for whence with the following
      macros:

old
new

0
SEEK_SET

1
SEEK_CUR

2
SEEK_END

L_SET
SEEK_SET

L_INCR
SEEK_CUR

L_XTND
SEEK_END

Note that file descriptors created by dup(2) or fork(2) share the current
      file position pointer, so seeking on such files may be
      subject to race conditions.

 
SEE ALSO
dup(2), fork(2), open(2), fseek(3), lseek64(3), posix_fallocate(3)

 
COLOPHON
This page is part of release 3.35 of the Linux man-pages project. A
      description of the project, and information about reporting
      bugs, can be found at http://man7.org/linux/man-pages/.

                    t
                  Copyright (c) 1980, 1991 Regents of the University of California.

                  and Copyright (c) 2011, Michael Kerrisk <mtk.manpagesdocument.write('@');(@)gmail.com>

                  All rights reserved.

                  Redistribution and use in source and binary forms, with or without

                  modification, are permitted provided that the following conditions

                  are met:
                  1. Redistributions of source code must retain the above copyright

                     notice, this list of conditions and the following disclaimer.

                  2. Redistributions in binary form must reproduce the above copyright

                     notice, this list of conditions and the following disclaimer in the

                     documentation and/or other materials provided with the distribution.

                  3. All advertising materials mentioning features or use of this software

                     must display the following acknowledgement:

                  This product includes software developed by the University of

                  California, Berkeley and its contributors.

                  4. Neither the name of the University nor the names of its contributors

                     may be used to endorse or promote products derived from this software

                     without specific prior written permission.

                  THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND

                  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE

                  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE

                  ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE

                  FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL

                  DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS

                  OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)

                  HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT

                  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY

                  OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF

                  SUCH DAMAGE.

                      document.write('@');(@)(#)lseek.2
                  6.5 (Berkeley) 3/10/91

                  Modified 1993-07-23 by Rik Faith <faithdocument.write('@');(@)cs.unc.edu>

                  Modified 1995-06-10 by Andries Brouwer <aebdocument.write('@');(@)cwi.nl>

                  Modified 1996-10-31 by Eric S. Raymond <esrdocument.write('@');(@)thyrsus.com>

                  Modified 1998-01-17 by Michael Haardt

                    <michaeldocument.write('@');(@)cantor.informatik.rwth-aachen.de>

                  Modified 2001-09-24 by Michael Haardt <michaeldocument.write('@');(@)moria.de>

                  Modified 2003-08-21 by Andries Brouwer <aebdocument.write('@');(@)cwi.nl>

                  2011-09-18, mtk, Added SEEK_DATA + SEEK_HOLE

