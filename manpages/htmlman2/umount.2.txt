

Linux
          manual pages
Section 2
 

 
 

Name
umount, umount2 — unmount file system

Synopsis

#include <sys/mount.h>

int
            umount(
const char *target);

           
        

int
            umount2(
const char *target,

 
int flags);

           
        

 
DESCRIPTION
umount() and umount2() remove the attachment of the
      (topmost) file system mounted on target.
Appropriate privilege (Linux: the CAP_SYS_ADMIN capability) is required to
      unmount file systems.
Linux 2.1.116 added the umount2() system call, which, like
      umount(), unmounts a target,
      but allows additional flags controlling the behavior
      of the operation:

MNT_FORCE (since Linux
          2.1.116)

Force unmount even if busy. This can cause data
            loss. (Only for NFS mounts.)

MNT_DETACH (since Linux
          2.4.11)

Perform a lazy unmount: make the mount point
            unavailable for new accesses, and actually perform the
            unmount when the mount point ceases to be busy.

MNT_EXPIRE (since Linux
          2.6.8)

Mark the mount point as expired. If a mount point is
            not currently in use, then an initial call to
            umount2() with this flag
            fails with the error EAGAIN, but marks the mount point as
            expired. The mount point remains expired as long as it
            isn't accessed by any process. A second umount2() call specifying
            MNT_EXPIRE unmounts an
            expired mount point. This flag cannot be specified with
            either MNT_FORCE or
            MNT_DETACH.

UMOUNT_NOFOLLOW (since Linux
          2.6.34)

Don't dereference target if it is a
            symbolic link. This flag allows security problems to be
            avoided in set-user-ID-root programs that
            allow unprivileged users to unmount file systems.

 
RETURN VALUE
On success, zero is returned. On error, −1 is
      returned, and errno is set
      appropriately.

 
ERRORS
The error values given below result from file-system type
      independent errors. Each file system type may have its own
      special errors and its own special behavior. See the kernel
      source code for details.

EAGAIN

A call to umount2()
            specifying MNT_EXPIRE
            successfully marked an unbusy file system as
            expired.

EBUSY

target could
            not be unmounted because it is busy.

EFAULT

target
            points outside the user address space.

EINVAL

target is
            not a mount point. Or, umount2() was called with
            MNT_EXPIRE and either
            MNT_DETACH or
            MNT_FORCE.

ENAMETOOLONG

A pathname was longer than MAXPATHLEN.

ENOENT

A pathname was empty or had a nonexistent
            component.

ENOMEM

The kernel could not allocate a free page to copy
            filenames or data into.

EPERM

The caller does not have the required
            privileges.

 
VERSIONS
MNT_DETACH and MNT_EXPIRE are only available in glibc
      since version 2.11.

 
CONFORMING TO
These functions are Linux-specific and should not be used
      in programs intended to be portable.

 
NOTES
The original umount()
      function was called as umount(device) and would
      return ENOTBLK when called
      with something other than a block device. In Linux 0.98p4 a
      call umount(dir)
      was added, in order to support anonymous devices. In Linux
      2.3.99-pre7 the call umount(device) was removed,
      leaving only umount(dir) (since now
      devices can be mounted in more than one place, so specifying
      the device does not suffice).

 
SEE ALSO
mount(2), path_resolution(7),
      mount(8), umount(8)

 
COLOPHON
This page is part of release 3.33 of the Linux man-pages project. A
      description of the project, and information about reporting
      bugs, can be found at http://man7.org/linux/man-pages/.

                  Copyright (C) 1993 Rickard E. Faith <faithdocument.write('@');(@)cs.unc.edu>

                  and Copyright (C) 1994 Andries E. Brouwer <aebdocument.write('@');(@)cwi.nl>

                  and Copyright (C) 2002, 2005 Michael Kerrisk <mtk.manpagesdocument.write('@');(@)gmail.com>

                  Permission is granted to make and distribute verbatim copies of this

                  manual provided the copyright notice and this permission notice are

                  preserved on all copies.

                  Permission is granted to copy and distribute modified versions of this

                  manual under the conditions for verbatim copying, provided that the

                  entire resulting derived work is distributed under the terms of a

                  permission notice identical to this one.

                  Since the Linux kernel and libraries are constantly changing, this

                  manual page may be incorrect or out-of-date.  The author(s) assume no

                  responsibility for errors or omissions, or for damages resulting from

                  the use of the information contained herein.  The author(s) may not

                  have taken the same level of care in the production of this manual,

                  which is licensed free of charge, as they might when working

                  professionally.

                  Formatted or processed versions of this manual, if unaccompanied by

                  the source, must acknowledge the copyright and authors of this work.

                  2008-10-06, mtk: Created this as a new page by splitting

                      umount/umount2 material out of mount.2

