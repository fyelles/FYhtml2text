

Linux
          manual pages
Section 2
 

 
 

Name
truncate, ftruncate — truncate a file to a specified
      length

Synopsis

#include <unistd.h>
#include <sys/types.h>

int
            truncate(
const char *path,

 
off_t length);

           
        

int
            ftruncate(
int fd,

 
off_t length);

           
        

Note

Feature Test Macro Requirements
                      for glibc (see feature_test_macros(7)):

truncate():

_BSD_SOURCE ||
                      _XOPEN_SOURCE
                      >= 500 || _XOPEN_SOURCE &&
                      _XOPEN_SOURCE_EXTENDED

|| /*
                      Since glibc 2.12: */

_POSIX_C_SOURCE
                      >= 200809L

ftruncate():

_BSD_SOURCE ||
                      _XOPEN_SOURCE
                      >= 500 || _XOPEN_SOURCE &&
                      _XOPEN_SOURCE_EXTENDED

|| /*
                      Since glibc 2.3.5: */

_POSIX_C_SOURCE
                      >= 200112L

 
DESCRIPTION
The truncate() and
      ftruncate() functions cause the
      regular file named by path or referenced by
      fd to be truncated to
      a size of precisely length bytes.
If the file previously was larger than this size, the
      extra data is lost. If the file previously was shorter, it is
      extended, and the extended part reads as null bytes
      ('\0').
The file offset is not changed.
If the size changed, then the st_ctime and st_mtime fields
      (respectively, time of last status change and time of last
      modification; see stat(2)) for the file are
      updated, and the set-user-ID and set-group-ID permission bits
      may be cleared.
With ftruncate(), the file
      must be open for writing; with truncate(), the file must be writable.

 
RETURN VALUE
On success, zero is returned. On error, −1 is
      returned, and errno is set
      appropriately.

 
ERRORS
For truncate():

EACCES

Search permission is denied for a component of the
            path prefix, or the named file is not writable by the
            user. (See also path_resolution(7).)

EFAULT

Path points
            outside the process's allocated address space.

EFBIG

The argument length is larger than the
            maximum file size. (XSI)

EINTR

While blocked waiting to complete, the call was
            interrupted by a signal handler; see fcntl(2) and
            signal(7).

EINVAL

The argument length is negative or
            larger than the maximum file size.

EIO

An I/O error occurred updating the inode.

EISDIR

The named file is a directory.

ELOOP

Too many symbolic links were encountered in
            translating the pathname.

ENAMETOOLONG

A component of a pathname exceeded 255 characters,
            or an entire pathname exceeded 1023 characters.

ENOENT

The named file does not exist.

ENOTDIR

A component of the path prefix is not a
            directory.

EPERM

The underlying file system does not support
            extending a file beyond its current size.

EROFS

The named file resides on a read-only file
            system.

ETXTBSY

The file is a pure procedure (shared text) file that
            is being executed.

For ftruncate() the same
      errors apply, but instead of things that can be wrong with
      path, we now have
      things that can be wrong with the file descriptor, fd:

EBADF

fd is not a
            valid descriptor.

EBADF or EINVAL

fd is not
            open for writing.

EINVAL

fd does not
            reference a regular file.

 
CONFORMING TO
4.4BSD, SVr4, POSIX.1-2001 (these calls first appeared in
      4.2BSD).

 
NOTES
The details in DESCRIPTION are for XSI-compliant systems.
      For non-XSI-compliant systems, the POSIX standard allows two
      behaviors for ftruncate() when
      length exceeds the
      file length (note that truncate() is not specified at all in such
      an environment): either returning an error, or extending the
      file. Like most UNIX implementations, Linux follows the XSI
      requirement when dealing with native file systems. However,
      some nonnative file systems do not permit truncate() and ftruncate() to be used to extend a file
      beyond its current length: a notable example on Linux is
      VFAT.
The original Linux truncate() and ftruncate() system calls were not designed
      to handle large file offsets. Consequently, Linux 2.4 added
      truncate64() and ftruncate64() system calls that handle
      large files. However, these details can be ignored by
      applications using glibc, whose wrapper functions
      transparently employ the more recent system calls where they
      are available.

 
BUGS
A header file bug in glibc 2.12 meant that the minimum
      value of _POSIX_C_SOURCE
      required to expose the declaration of ftruncate() was 200809L instead of 200112L.
      This has been fixed in later glibc versions.

 
SEE ALSO
open(2), stat(2), path_resolution(7)

 
COLOPHON
This page is part of release 3.33 of the Linux man-pages project. A
      description of the project, and information about reporting
      bugs, can be found at http://man7.org/linux/man-pages/.

                    Copyright (c) 1983, 1991 The Regents of the University of California.

                  All rights reserved.

                  Redistribution and use in source and binary forms, with or without

                  modification, are permitted provided that the following conditions

                  are met:
                  1. Redistributions of source code must retain the above copyright

                     notice, this list of conditions and the following disclaimer.

                  2. Redistributions in binary form must reproduce the above copyright

                     notice, this list of conditions and the following disclaimer in the

                     documentation and/or other materials provided with the distribution.

                  3. All advertising materials mentioning features or use of this software

                     must display the following acknowledgement:

                  This product includes software developed by the University of

                  California, Berkeley and its contributors.

                  4. Neither the name of the University nor the names of its contributors

                     may be used to endorse or promote products derived from this software

                     without specific prior written permission.

                  THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND

                  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE

                  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE

                  ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE

                  FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL

                  DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS

                  OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)

                  HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT

                  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY

                  OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF

                  SUCH DAMAGE.

                      document.write('@');(@)(#)truncate.2
                  6.9 (Berkeley) 3/10/91

                  Modified 1993-07-24 by Rik Faith <faithdocument.write('@');(@)cs.unc.edu>

                  Modified 1996-10-22 by Eric S. Raymond <esrdocument.write('@');(@)thyrsus.com>

                  Modified 1998-12-21 by Andries Brouwer <aebdocument.write('@');(@)cwi.nl>

                  Modified 2002-01-07 by Michael Kerrisk <mtk.manpagesdocument.write('@');(@)gmail.com>

                  Modified 2002-04-06 by Andries Brouwer <aebdocument.write('@');(@)cwi.nl>

                  Modified 2004-06-23 by Michael Kerrisk <mtk.manpagesdocument.write('@');(@)gmail.com>

